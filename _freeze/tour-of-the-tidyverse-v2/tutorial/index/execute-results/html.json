{
  "hash": "f8971a8efd81087aee920f3a5eb5780c",
  "result": {
    "markdown": "---\ntitle: An Antarctic Tour of the Tidyverse v2.0\ncss: ../../assets/silvia.scss \ntoc: true\ntoc-location: right\ntoc-title: In this tutorial\ncode-tools:\n  source: https://github.com/spcanelon/slides/tree/main/tour-of-the-tidyverse-v2/tutorial/index.qmd\ncode-copy: true\ncode-link: true\ncode-overflow: wrap\ncode-line-numbers: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n![Illustration by Allison Horst](../images/lter_penguins.png){fig-alt=\"Beautiful illustration of three penguins, Chinstrap, Gentoo, and Adélie, each labeled with their species. The Chinstrap penguin has a magenta background, the Gentoo penguin a teal background, and the Adélie penguin an orange background\" width=\"75%\"}\n\n## Before we begin\n\n- This written tutorial is an alternative to the slide content in [slides.silviacanelon.com/tour-of-the-tidyverse-v2](https://slides.silviacanelon.com/tour-of-the-tidyverse-v2)\n\n- [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/articles/intro.html) 📦 developed by Drs. [Allison Horst](https://www.allisonhorst.com), [Alison Hill](https://apreshill.com), and [Kristen Gorman](https://gormankb.github.io).\n\n- [Penguin illustrations by Allison Horst](https://github.com/allisonhorst/stats-illustrations)\n\n## Meet our penguin friends!\n\n::: {#penguins layout-ncol=3}\n\n![Chinstrap](https://github.com/spcanelon/slides/blob/main/tour-of-the-tidyverse/images/penguin_chinstrap.jpg?raw=true){fig-alt=\"These penguins have a white face but the top of the head is black with a narrow black band that resembles a chinstrap. The bill is short and black, and like other penguins Chinstraps have a black back and white underside\"}\n\n![Gentoo](https://github.com/spcanelon/slides/blob/main/tour-of-the-tidyverse/images/penguin_gentoo.jpg?raw=true){fig-alt=\"These penguins have a black face with a white region that begins behind the eyes and extends and narrows towards the top of the head. The bill is orange, and like other penguins Gentoos have a black back and white underside\"}\n\n![Adélie](https://github.com/spcanelon/slides/blob/main/tour-of-the-tidyverse/images/penguin_adelie.jpg?raw=true){fig-alt=\"Black face with some white from the underside that extends into the bottom of the 'cheeks.' The bill is black, and like other penguins Adélies have a black back and white underside\"}\n\n:::\n<!--end layout-->\n\n## Meet the tidyverse!\n\nA collection of R packages, including these 9 core packages (and more!) \n\n![](../images/drawio/tidyverse.png){alt=\"schematic including hex logos for the 9 tidyverse packages, readr, ggplot2, forcats, tidyr, tibble, dplyr, stringr, purrr, and lubridate\"}\n\n`lubridate` was welcomed into the `tidyverse` as a core package on [August 12, 2022](https://github.com/tidyverse/tidyverse/commit/3be82832a4982d6d10e25e375cedeb8c3161be35). You may need to install the development version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"tidyverse/tidyverse\")\n```\n:::\n\n\n## readr <img src=\"../images/hex/readr.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends are starting their tour with the `readr` package!\n\n![](../images/drawio/01-readr.png)\n\n:::\n\nImporting data is the very first step!\n\nYou can use `readr` to import rectangular data.\n\nYou can import...\n\n- comma separated (CSV) files with `read_csv()`\n- tab separated files with `read_tsv()`\n- general delimited files with `read_delim()`\n- fixed width files with `read_fwf()`\n- tabular files where columns are separated by white-space with `read_table()`\n- web log files with `read_log()` \n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf>\n![](https://raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/data-import-cheatsheet-thumbs.png){fig-alt=\"readr cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 11 Data import](https://r4ds.had.co.nz/data-import.html)\n- Package documentation: <https://readr.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Read data in\n\nOptions 1 & 2 below will get you the same raw dataset for Adélie penguins. Try it out!\n\nOption 1: load using URL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-pal.219.3&entityid=002f3893385f710df69eeebe893144ff\")\n```\n:::\n\n\nOption 2: load using filepath\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"tutorial/raw_adelie.csv\")\n```\n:::\n\n\nOption 3: Lucky for us, the `palmerpenguins` 📦 compiles data from all three species together! Check the clean data and raw data tabs to learn more.\n\n#### Clean data\n\n`penguins` contains a clean dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- palmerpenguins::penguins\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n#### Raw data\n\n`penguins_raw` contains the raw data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`\n```\n:::\n:::\n\n\n\n## tibble <img src=\"../images/hex/tibble.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `tibble` package!\n\n![](../images/drawio/02-tibble.png)\n\n:::\n\nA `tibble` is much like the `dataframe` in base R, but optimized for use in the Tidyverse.\n\n### Cheatsheet\n\nThe tibble package shares a cheatsheet with the tidyr package\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf>\n\n![](../images/cheatsheet/02-tibble-tidyr.png){width=65% fig-alt=\"tidyr/tibble cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 10 Tibbles](https://r4ds.had.co.nz/tibbles.html)\n- Package documentation: <https://tibble.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Code\n\nLet's take a look at the differences!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# try each of these commands in the console and see if \n# you can spot the differences!\n\nas_tibble(penguins)\nas.data.frame(penguins)\n```\n:::\n\n\n#### Result\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(penguins) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n6   male 2007\n```\n:::\n:::\n\n\nWhat differences do you notice?\n\nYou might see a `tibble` prints:\n\n- variable classes\n- only 10 rows\n- only as many columns as can fit on the screen\n- `NA`s are highlighted in console so they're easy to spot (font highlighting and styling in `tibble`)\n\nNot so much a concern in an R Markdown file, but noticeable in the console\n\nThis enhanced print method makes it easier to work with large datasets\n\nThere are a couple of other main differences, namely in **subsetting** and **recycling**\n\nCheck them out in [`vignette(\"tibble\")`](https://tibble.tidyverse.org/articles/tibble.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvignette(\"tibble\")\n```\n:::\n\n\n## ggplot2 <img src=\"../images/hex/ggplot2.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `ggplot2` package!\n\n![](../images/drawio/03-ggplot2.png)\n\n:::\n\n`ggplot2` uses the \"Grammar of Graphics\" and layers graphical components together to help us create a plot\n\nLet's start by making a simple plot of our data!\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/data-visualization-2.1.pdf>\n![](../images/cheatsheet/03-ggplot2.png){fig-alt=\"ggplot2 cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 3 Data visualization](https://r4ds.had.co.nz/data-visualisation.html)\n- Package documentation: <https://ggplot2.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### View the data\n\nGet a full view of the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(penguins)\n```\n:::\n\n\nOr catch a `glimpse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n#### Scatterplot\n\nLet's see if body mass varies by penguin sex using `geom_point()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/scatterplot-1.png){fig-alt='A scatterplot with categorical penguin sex along the x axis and continuous body mass along the y axis. The three sex categories are female, male, and NA. The body mass appears to range between 2400g and 6500g. Because this is a scatterplot, there are various points scattered along the y axis in a line above each sex category, which doesn\\'t tell us much about these data. There are other types of plots better suited for visualizing the relationship between a continuous variable and a categorical variable.' width=672}\n:::\n:::\n\n\n#### Boxplot\n\nLet's see if body mass varies by penguin sex, this time with `geom_boxplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/boxplot-1.png){fig-alt='A boxplot with penguin sex along the x axis and body mass along the y axis. Again, the three sex categories are female, male, and NA, and the body mass appears to range between 2400g and 6500g. Because this is a boxplot, we can visualize the minimum value, first quartile, median, third quartile, and maximum value of penguin body mass, for each penguin sex category. Female penguins have a lower median body mass than male penguins, while the NA sex category is somewhere in between the two. There are no outliers.' width=672}\n:::\n:::\n\n\n#### By Species\n\nLet's see if body mass varies by penguin sex, and now fill the boxplots according to penguin species\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/by-species-1.png){fig-alt='A boxplot with penguin sex along the x axis and body mass along the y axis. Again, the three sex categories are female, male, and NA, and the body mass appears to range between 2400g and 6500g. This time, instead of one boxplot per sex category, there is a boxplot for each species, per sex category, and these are filled with different colors. Gentoo boxplots are blue, Adélie boxplots are reddish, and Chinstrap boxplots are green. Male penguins have higher body mass across species, and Gentoo penguins stand out as having higher body mass than both Chinstrap and Adélie penguins. Low body mass outliers exist for female Chinstrap penguins and NA Gentoo penguins, and high body mass outliers exist for male Chinstrap penguins. There is no boxplot for Chinstrap penguins in the NA sex category.' width=672}\n:::\n:::\n\n\nThe boxplot filled by species helps us see...\n\n- Gentoo penguins have higher body mass than Adélie and Chinstrap penguins\n- Higher body mass among male Gentoo penguins compared to female penguins\n- Pattern not as discernible when comparing Adélie and Chinstrap penguins\n- No `NA`s among Chinstrap penguin data points! **sex** was available for each observation\n\n\n## dplyr <img src=\"../images/hex/dplyr.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `dplyr` package!\n\n![](../images/drawio/04-dplyr.png)\n\n:::\n\nData transformation helps you get the data in exactly the right form you need \n\nWith `dplyr` you can:\n\n- create new variables\n- create summaries\n- rename variables\n- reorder observations\n- ...and more!\n\nThis is possible thanks to intuitive functions:\n\n- Pick observations by their values with `filter()`.\n- Reorder the rows with `arrange()`.\n- Pick variables by their names `select()`.\n- Create new variables with functions of existing variables with `mutate()`.\n- Collapse many values down to a single summary with `summarize()`.\n- `group_by()` gets the above functions to operate group-by-group rather than on the entire dataset. \n- and `count()` + `add_count()` simplify `group_by()` + `summarize()` when you just want to count\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf>\n![](../images/cheatsheet/04-dplyr.png){fig-alt=\"dplyr cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 11 Data transformation](https://r4ds.had.co.nz/transform.html)\n- Package documentation: <https://dplyr.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Select\n\nCan you spot the difference in the following two operations?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, \n       species,\n       sex,\n       body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(species,\n         sex,\n         body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n```\n:::\n:::\n\n\nThe first defines the penguins dataset with the `select()` function, while the second uses the pipe `|>` to pass the penguins dataset along to `select()`\n\n#### Arrange\n\nWe can use `arrange()` to arrange our data in descending order by **body_mass_g**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npenguins |>\n  select(species, sex, body_mass_g) |>\n  arrange(desc(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex   body_mass_g\n   <fct>   <fct>       <int>\n 1 Gentoo  male         6300\n 2 Gentoo  male         6050\n 3 Gentoo  male         6000\n 4 Gentoo  male         6000\n 5 Gentoo  male         5950\n 6 Gentoo  male         5950\n 7 Gentoo  male         5850\n 8 Gentoo  male         5850\n 9 Gentoo  male         5850\n10 Gentoo  male         5800\n# … with 334 more rows\n```\n:::\n:::\n\n\n#### Group By & Summarize\n\nWe can use `group_by()` to group our data by **species** and **sex**\n\nWe can use `summarize()` to calculate the average **body_mass_g** for each grouping\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3|4\"}\npenguins |>\n  select(species, sex, body_mass_g) |>\n  group_by(species, sex) |>         \n  summarize(mean = mean(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>     NA \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>     NA \n```\n:::\n:::\n\n\n#### Count option 1\n\nIf we're just interested in _counting_ the observations in each grouping, we can group and summarize with special functions `count()` and `add_count()`.\n\nCounting can be done with `group_by()` and `summarize()`, but it's a little cumbersome. \n\nIt involves...\n\n1. using `mutate()` to create an intermediate variable **n_species** that adds up all observations per **species**, and\n1. an `ungroup()`-ing step\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\npenguins |> \n  group_by(species) |>\n  mutate(n_species = n()) |> \n  ungroup() |> \n  group_by(species, sex, n_species) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n# Groups:   species, sex [8]\n  species   sex    n_species     n\n  <fct>     <fct>      <int> <int>\n1 Adelie    female       152    73\n2 Adelie    male         152    73\n3 Adelie    <NA>         152     6\n4 Chinstrap female        68    34\n5 Chinstrap male          68    34\n6 Gentoo    female       124    58\n7 Gentoo    male         124    61\n8 Gentoo    <NA>         124     5\n```\n:::\n:::\n\n\n#### Count option 2\n\nIf we're just interested in _counting_ the observations in each grouping, we can group and summarize with special functions `count()` and `add_count()`.\n\nIn contrast, `count()` and `add_count()` offer a simplified approach [^1]\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n  species   sex        n n_species\n  <fct>     <fct>  <int>     <int>\n1 Adelie    female    73       152\n2 Adelie    male      73       152\n3 Adelie    <NA>       6       152\n4 Chinstrap female    34        68\n5 Chinstrap male      34        68\n6 Gentoo    female    58       124\n7 Gentoo    male      61       124\n8 Gentoo    <NA>       5       124\n```\n:::\n:::\n\n\n#### Mutate\n\nWe can add to our counting example by using `mutate()` to create a new variable **prop**\n\n**prop** represents the proportion of penguins of each **sex**, grouped by **species**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Adelie    female    73       152 48.0 \n2 Adelie    male      73       152 48.0 \n3 Adelie    <NA>       6       152  3.95\n4 Chinstrap female    34        68 50   \n5 Chinstrap male      34        68 50   \n6 Gentoo    female    58       124 46.8 \n7 Gentoo    male      61       124 49.2 \n8 Gentoo    <NA>       5       124  4.03\n```\n:::\n:::\n\n\n#### Filter\n\nFinally, we can filter rows to only show us **Chinstrap** penguin summaries by adding `filter()` to our pipeline\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100) |>\n  filter(species == \"Chinstrap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Chinstrap female    34        68    50\n2 Chinstrap male      34        68    50\n```\n:::\n:::\n\n\n## forcats <img src=\"../images/hex/forcats.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `forcats` package!\n\n![](../images/drawio/05-forcats.png)\n\n:::\n\n`forcats` helps us work with **categorical variables** or factors \n\nThese are variables that have a fixed and known set of possible values, like **species**, **island**, and **sex** in our `penguins` dataset\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/factors.pdf>\n![](../images/cheatsheet/05-forcats.png){width=65% fig-alt=\"forcats cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 15 Factors](https://r4ds.had.co.nz/factors.html)\n- Package documentation: <https://forcats.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Code\n\nCurrently the **year** variable in `penguins` is continuous from 2007 to 2009\n\nUsually this isn't what we want and we might want to turn it into a categorical variable instead\n\nThe `factor()` function is perfect for this\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(year_factor = factor(year, levels = unique(year)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n```\n:::\n:::\n\n\n#### Result\n\nThe result is a new variable **year_factor** with factor levels **2007**, **2008**, and **2009**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_new <- \n  penguins |> \n  mutate(year_factor = factor(year, levels = unique(year)))\npenguins_new\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n```\n:::\n:::\n\n\nWe can check our new variable's class:\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(penguins_new$year_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\nAnd check its factor levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(penguins_new$year_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2007\" \"2008\" \"2009\"\n```\n:::\n:::\n\n\n\n## stringr <img src=\"../images/hex/stringr.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `stringr` package!\n\n![](../images/drawio/06-stringr.png)\n\n:::\n\n`stringr` helps us manipulate strings! \n\nThe package includes many functions to help us with **regular expressions**, which are a concise language for describing patterns in strings.\n \nThese functions help us:  \n\n-  detect matches\n-  subset strings\n-  manage string lengths\n-  mutate strings\n-  join and split strings\n-  order strings\n-  ...and more!\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/strings.pdf>\n![](../images/cheatsheet/06-stringr.png){fig-alt=\"stringr cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 14 Strings](https://r4ds.had.co.nz/strings.html)\n- Package documentation: <https://stringr.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Mutate\n\nWhat does this chunk do?\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species island    ISLAND   \n   <fct>   <fct>     <chr>    \n 1 Adelie  Torgersen TORGERSEN\n 2 Adelie  Torgersen TORGERSEN\n 3 Adelie  Torgersen TORGERSEN\n 4 Adelie  Torgersen TORGERSEN\n 5 Adelie  Torgersen TORGERSEN\n 6 Adelie  Torgersen TORGERSEN\n 7 Adelie  Torgersen TORGERSEN\n 8 Adelie  Torgersen TORGERSEN\n 9 Adelie  Torgersen TORGERSEN\n10 Adelie  Torgersen TORGERSEN\n# … with 334 more rows\n```\n:::\n:::\n\n\nIt creates a new variable `ISLAND` that transforms `island` observations to uppercase\n\n#### Join\n\nHow about this one?\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island)) |>\n  mutate(species_island = str_c(species, ISLAND, sep = \"_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 4\n   species island    ISLAND    species_island  \n   <fct>   <fct>     <chr>     <chr>           \n 1 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 2 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 3 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 4 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 5 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 6 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 7 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 8 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 9 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n10 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n# … with 334 more rows\n```\n:::\n:::\n\n\nIt creates a new vaiable `species_island` that concatenates `species` and `ISLAND` strings and places an underscore between them\n\n## tidyr <img src=\"../images/hex/tidyr.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `tidyr` package! \n\n![](../images/drawio/07-tidyr.png)\n\n:::\n\n`tidyr` helps us transform our dataset into a [tidy format](https://r4ds.had.co.nz/tidy-data.html)\n\n> There are three interrelated rules which make a dataset tidy:\n>\n> - Each variable must have its own column.\n> - Each observation must have its own row.\n> - Each value must have its own cell.\n> ![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png){fig-alt=\"schematic representing the 3 earlier points\"}\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf>\n![](../images/cheatsheet/07-tidyr.png){fig-alt=\"tidyr cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 12 Tidy data](https://r4ds.had.co.nz/tidy-data.html)\n- Package documentation: <https://tidyr.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Un-tidying\n\nBoth penguin datasets are already tidy!\n\nWe can pretend that `penguins` wasn't tidy and that it looked instead like `untidy_penguins` below, where **body_mass_g** was recorded separately for *male*, *female*, and *NA* **sex** penguins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_penguins <- \n  penguins |> \n  pivot_wider(names_from = sex, values_from = body_mass_g)\nuntidy_penguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_dept…¹ flipp…²  year  male female  `NA`\n   <fct>   <fct>              <dbl>       <dbl>   <int> <int> <int>  <int> <int>\n 1 Adelie  Torgersen           39.1        18.7     181  2007  3750     NA    NA\n 2 Adelie  Torgersen           39.5        17.4     186  2007    NA   3800    NA\n 3 Adelie  Torgersen           40.3        18       195  2007    NA   3250    NA\n 4 Adelie  Torgersen           NA          NA        NA  2007    NA     NA    NA\n 5 Adelie  Torgersen           36.7        19.3     193  2007    NA   3450    NA\n 6 Adelie  Torgersen           39.3        20.6     190  2007  3650     NA    NA\n 7 Adelie  Torgersen           38.9        17.8     181  2007    NA   3625    NA\n 8 Adelie  Torgersen           39.2        19.6     195  2007  4675     NA    NA\n 9 Adelie  Torgersen           34.1        18.1     193  2007    NA     NA  3475\n10 Adelie  Torgersen           42          20.2     190  2007    NA     NA  4250\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm\n```\n:::\n:::\n\n\n#### Re-tidying\n\nNow let's make it tidy again!\n\nWe'll use the help of `pivot_longer()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4\"}\nuntidy_penguins |>\n  pivot_longer(cols = male:`NA`,           \n               names_to = \"sex\",           \n               values_to = \"body_mass_g\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,032 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹  year sex   body_…²\n   <fct>   <fct>              <dbl>         <dbl>      <int> <int> <chr>   <int>\n 1 Adelie  Torgersen           39.1          18.7        181  2007 male     3750\n 2 Adelie  Torgersen           39.1          18.7        181  2007 fema…      NA\n 3 Adelie  Torgersen           39.1          18.7        181  2007 NA         NA\n 4 Adelie  Torgersen           39.5          17.4        186  2007 male       NA\n 5 Adelie  Torgersen           39.5          17.4        186  2007 fema…    3800\n 6 Adelie  Torgersen           39.5          17.4        186  2007 NA         NA\n 7 Adelie  Torgersen           40.3          18          195  2007 male       NA\n 8 Adelie  Torgersen           40.3          18          195  2007 fema…    3250\n 9 Adelie  Torgersen           40.3          18          195  2007 NA         NA\n10 Adelie  Torgersen           NA            NA           NA  2007 male       NA\n# … with 1,022 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n## purrr <img src=\"../images/hex/purrr.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends have reached the `purrr` package!\n\n![](../images/drawio/08-purrr.png)\n\n:::\n\nThis package provides tools for working with functions and vectors \n\nThe `purrr` family of functions helps us replace for loops, making our code easier to read and more succint.\n\nWith `purrr` you can:\n\n- Iterate over a single input with `map()`\n- Iterate over two inputs in parallel with `map2()`\n- Iterate with multiple arguments with `pmap()`\n- Iterate with multiple arguments and functions with `invoke_map()`\n- Call a function for its side-effects with `walk()`, `walk2()`, and `pwalk()`\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf>\n![](../images/cheatsheet/08-purrr.png){fig-alt=\"purrr cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 21 Iteration](https://r4ds.had.co.nz/iteration.html)\n- Package documentation: <https://purrr.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Time for a change?\n\nOk, we love our earlier boxplot showing us **body_mass_g** by **sex** and colored by **species**...but let's change up the colors to keep with our Antarctica theme!\n\nI'm a big fan of the color palettes in the `nord` 📦\n\n![](https://raw.githubusercontent.com/jkaupp/nord/master/man/figures/README-palettes-1.png){fig-alt=\"16 different nordic color palettes from the Nord package. We will be focusing on the mountain_forms palette which was dark teal, dusty blue, snowy white, dusty purple, and dark purple\"}\n\n#### Goal\n\nLet's turn this plot...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){fig-alt='Our filled boxplot from our earlier ggplot2 exercises! To recap, a boxplot with penguin sex along the x axis and body mass along the y axis. Again, the three sex categories are female, male, and NA, and the body mass appears to range between 2400g and 6500g. There is a boxplot for each species per sex category, and these are filled with different colors. Gentoo boxplots are blue, Adélie boxplots are reddish, and Chinstrap boxplots are green.' width=672}\n:::\n:::\n\n\n...into this one!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-alt='In contrast to the other filled boxplot referred to in this tab, this one is filled with nordic colors. Gentoo boxplots are a dark purple, Adélie boxplots are a dark teal, and Chinstrap boxplots are a snowy white.' width=672}\n:::\n:::\n\n\nNote: The color choices in this example are meant for demo purposes only. Be sure to consider the [accessibility of your data viz](https://www.highcharts.com/blog/tutorials/10-guidelines-for-dataviz-accessibility), including color contrast between different elements.\n\n#### Option 1\n\n\nYou can choose colors using the color hex codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnord::nord_palettes$mountain_forms\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#184860\" \"#486078\" \"#d8d8d8\" \"#484860\" \"#181830\"\n```\n:::\n:::\n\n\nAnd assign them using the `scale_fill_manual()` function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = c(\"#184860\", \n               \"#D8D8D8\", \n               \"#181830\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n#### Options 2 & 3\n\nYou can also use the palette name, like **mountain_forms**, though the colors assigned may not align with what you want\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-6\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(values = nord::nord_palettes$mountain_forms)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/nord-2-1.png){fig-alt='Our boxplot filled with nordic colors though the scale_fill_manual function has automatically selected a different combination of colors from the palette. Gentoo boxplots are snowy white intead of dark purple, Adélie boxplots are a still a dark teal, and Chinstrap boxplots are a dusty blue intead of snowy white.' width=672}\n:::\n:::\n\n\nAnd sometimes, color palette packages come with their own functions that assign colors, like `scale_fill_nord()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-6\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  nord::scale_fill_nord(palette = \"mountain_forms\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){fig-alt='Our boxplot filled with nordic colors. Gentoo boxplots are a dark purple, Adélie boxplots are a dark teal, and Chinstrap boxplots are a snowy white.' width=672}\n:::\n:::\n\n\n#### Purrr?\n\nThe `prismatic` 📦 helps us **see** the colors that correspond to each color hex code (mostly), with the `color()` function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prismatic)\n\nprismatic::color(nord::nord_palettes$mountain_forms)\n```\n:::\n\n![](../images/nord_mountainforms.png){fig-alt=\"hex codes for the 5 colors in the mountain_forms palette, with a background color to match it. Dark teal is #184860, dusty blue is #486078, snowy white is #D8D8D8, purple is #484860, and dark purple is #181830\" width=\"75%\"}\n\n`purrr`'s `map()` function can help us iterate `color()` over all palettes in a palette package like `nord`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnord::nord_palettes |> \n    map(prismatic::color)\n```\n:::\n\n\n![](../images/nord_multiple.png){fig-alt=\"hex color codes for 4 of the palettes in the nord package, including mountain_forms\" width=\"75%\"}\n\n#### More palettes!\n\n::: {layout-ncol=\"2\" layout-valign=\"center\"}\n\n🎨 [r-color-palettes repo](https://github.com/EmilHvitfeldt/r-color-palettes) from Emil Hvitfeldt<br>Like this Wes Anderson themed one! And many, many others 🤩\n\n![](../images/wesanderson_example_cropped.png){fig-alt=\"9 different bright color palettes from the wesanderson color palette package\"}\n\n:::\n\n## lubridate <img src=\"../images/hex/lubridate.png\" style=\"float:right;\" width=\"10%\">\n\n::: {layout=\"[1, 2]\" layout-valign=\"center\"}\n\nOur penguin friends are ending their tour with the `lubridate` package!\n\n![](../images/drawio/09-lubridate.png)\n\n:::\n\n`lubridate` helps us work with dates and times, including \n\n- a **date** like `August 31, 2022`\n- a **time** like `10:35 am`\n- a **date-time** like `2022-08-31 10:35:00`  \n\nYou can...\n\n- convert strings or numbers to date-times\n- get and set components of a date-time\n- round date-times\n- add or subtract periods to model events that happen at specific clock times\n- add or substract durations to model a physical process\n- work with time intervals\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/blob/main/lubridate.pdf>\n![](../images/cheatsheet/09-lubridate.png){fig-alt=\"lubridate cheatsheet\"}\n\n### Reading\n\n::: {layout=[1,2]}\n\n![](../images/r4ds-cover.png){width=\"100\" fig-alt=\"R4DS book cover\"}\n\n- R for Data Science: [Ch 16 Dates and times](https://r4ds.had.co.nz/dates-and-times.html)\n- Package documentation: <https://lubridate.tidyverse.org>\n\n:::\n\n### Exercise\n\n#### Read data in\n\nRecall that `palmperpenguins` includes raw data as well\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw <- palmerpenguins::penguins_raw\npenguins_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`\n```\n:::\n:::\n\n\n#### View date-times\n\nIn the raw data, `Date Egg` is the date that a penguin nest in the study was observed with 1 egg\n\nCheck out `?penguins_raw` to learn more about the other variables in this dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> select(Species, Sex, `Date Egg`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   Species                             Sex    `Date Egg`\n   <chr>                               <chr>  <date>    \n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n# … with 334 more rows\n```\n:::\n:::\n\n\n#### Get date components\n\nWe can use `year()`, `month()`, and `day()` to extract different components from `Date Egg`\n\nIn addition, `month()` provides some options to let us decide whether we want the month displayed as a character string, and whether we want that string abbreviated\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-5\"}\npenguins_raw |> \n  select(Species, Sex, `Date Egg`) |> \n  mutate(Year = year(`Date Egg`),\n         Month = month(`Date Egg`, \n                       label = TRUE,\n                       abbr = FALSE),\n         Day = day(`Date Egg`))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 6\n   Species                             Sex    `Date Egg`  Year Month      Day\n   <chr>                               <chr>  <date>     <dbl> <ord>    <int>\n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11  2007 November    11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11  2007 November    11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16  2007 November    16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16  2007 November    16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15  2007 November    15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15  2007 November    15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n# … with 334 more rows\n```\n:::\n:::\n\n\nThat concludes the tutorial, thanks for following along! \n\n\n[^1]: Example kindly [contributed by Alison Hill](https://github.com/spcanelon/2020-rladies-chi-tidyverse/issues/2)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}