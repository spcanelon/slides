[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slides",
    "section": "",
    "text": "Under construction\n\n\n\n\n\nI’ve just noticed an issue with slide decks unintentionally sharing RevealJS theming across this site. This means some RevealJS slide decks are not styled as intended and may not be easy to read.\nThanks for your patience while I figure out what’s going on!\n\n\n\n\nThis gallery features a collection of slide decks made witha variety of publishing tools\n\n\nWritten by Silvia Canelón\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThinking Big with Maps in R: Tips on Wrangling Large Vector Data into Interactive Maps\n\n\n2022 CANSSI Ontario Statistical Software Conference\n\n\n\nrevealjs\n\n\n\n\nNov 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhilly Center City District Sips 2022: An Interactive Map\n\n\nR-Ladies Philly\n\n\n\nrevealjs\n\n\n\n\nSep 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Antarctic Tour of the Tidyverse v2.0\n\n\nQuarto RevealJS Remix\n\n\n\nrevealjs\n\n\n\n\nAug 31, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExploring Traumatic Brain Injury Mechanisms and Severity Using Electronic Health Records\n\n\n2022 DBEI & CCEB Research Day\n\n\n\npptx\n\n\n\n\nApr 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLessons Learned from the EHR: Things I’ve Learned from Working with Electronic Health Records\n\n\nToronto Data Workshop\n\n\n\nxaringan\n\n\n\n\nFeb 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRevealing Room for Improvement in Accessibility within a Social Media Data Visualization Learning Community\n\n\ncsv, conf, v6\n\n\n\nxaringan\n\n\n\n\nMay 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Impact of Sickle Cell Status on Adverse Delivery Outcomes Using Electronic Health Record Data\n\n\n2021 AMIA Informatics Summit\n\n\n\nxaringan\n\n\n\n\nMar 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR-Ladies Themed xaringan Template\n\n\nR-Ladies Global\n\n\n\nxaringan\n\n\n\n\nMar 16, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Learn-R to Teach-R: An Expert Panel on Effective R Instruction\n\n\nR-Ladies Philly\n\n\n\ngoogle\n\n\n\n\nFeb 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroducción al paquete xaringan\n\n\nR-Ladies Xalapa\n\n\n\nxaringan\n\n\n\n\nDec 17, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSharing Your Work with xaringan: The Beyond\n\n\n2020 NHS-R Conference\n\n\n\nxaringan\n\n\n\n\nNov 5, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSharing Your Work with xaringan: The Basics\n\n\n2020 NHS-R Conference\n\n\n\nxaringan\n\n\n\n\nNov 3, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNHS-R xaringan Theme\n\n\nCustom CSS for the NHS-R Community\n\n\n\nxaringan\n\n\n\n\nOct 23, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing lubridate to work with time intervals\n\n\nRStudio Instructor Certification Teaching Exam\n\n\n\nxaringan\n\n\n\n\nSep 17, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Antarctic Tour of the Tidyverse\n\n\nR-Ladies Chicago\n\n\n\nxaringan\n\n\n\n\nAug 31, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChapter 5: Data transformation\n\n\nR for Data Science Book Club\n\n\n\nxaringan\n\n\n\n\nAug 21, 2020\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/01-readr.html#section",
    "href": "tour-of-the-tidyverse-v2/01-readr.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/01-readr.html#readr-info",
    "href": "tour-of-the-tidyverse-v2/01-readr.html#readr-info",
    "title": "Silvia Canelón",
    "section": "readr: info",
    "text": "readr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\n\nImporting data is the very first step!\nYou can use readr to import rectangular data.\n\nYou can import…\n\ncomma separated (CSV) files with read_csv()\ntab separated files with read_tsv()\ngeneral delimited files with read_delim()\nfixed width files with read_fwf()\ntabular files where columns are separated by white-space with read_table()\nweb log files with read_log()\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data import\nPackage documentation: https://readr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/01-readr.html#readr-exercise",
    "href": "tour-of-the-tidyverse-v2/01-readr.html#readr-exercise",
    "title": "Silvia Canelón",
    "section": "readr: exercise",
    "text": "readr: exercise\n\n\nRead data inClean dataRaw data\n\n\nOptions 1 & 2 below will get you the same raw dataset for Adélie penguins. Try it out!\nOption 1: load using URL\n\nread_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-pal.219.3&entityid=002f3893385f710df69eeebe893144ff\")\n\n Option 2: load using filepath\n\nread_csv(\"tutorial/raw_adelie.csv\")\n\n\n\nOption 3: Lucky for us, the palmerpenguins 📦 compiles data from all three species together! Check the clean data and raw data tabs to learn more.\n\n\npenguins contains a clean dataset\n\npenguins <- palmerpenguins::penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n\n\npenguins_raw contains the raw data\n\npalmerpenguins::penguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/02-tibble.html#section",
    "href": "tour-of-the-tidyverse-v2/02-tibble.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/02-tibble.html#tibble-info",
    "href": "tour-of-the-tidyverse-v2/02-tibble.html#tibble-info",
    "title": "Silvia Canelón",
    "section": "tibble: info",
    "text": "tibble: info\n\n\nOverviewCheatsheetReading\n\n\n\nA tibble is much like the dataframe in base R,but optimized for use in the Tidyverse.\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 10 Tibbles\nPackage documentation: https://tibble.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/02-tibble.html#tibble-exercise",
    "href": "tour-of-the-tidyverse-v2/02-tibble.html#tibble-exercise",
    "title": "Silvia Canelón",
    "section": "tibble: exercise",
    "text": "tibble: exercise\n\n\nCodeResultChatMore\n\n\nLet’s take a look at the differences!\n\n# try each of these commands in the console and see if \n# you can spot the differences!\n\nas_tibble(penguins)\nas.data.frame(penguins)\n\n\n\n\nas_tibble(penguins) |> head(4)\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\n\n\nas.data.frame(penguins) |> head(4)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n\n\n\n\nWhat differences do you see?\nYou might see a tibble prints:\n\nvariable classes\nonly 10 rows\nonly as many columns as can fit on the screen\nNAs are highlighted in console so they’re easy to spot (font highlighting and styling in tibble)\n\nNot so much a concern in an R Markdown file, but noticeable in the console\nThis enhanced print method makes it easier to work with large datasets\n\n\nThere are a couple of other main differences, namely in subsetting and recycling\nCheck them out in vignette(\"tibble\")\n\nvignette(\"tibble\")"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/03-ggplot2.html#section",
    "href": "tour-of-the-tidyverse-v2/03-ggplot2.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/03-ggplot2.html#ggplot2-info",
    "href": "tour-of-the-tidyverse-v2/03-ggplot2.html#ggplot2-info",
    "title": "Silvia Canelón",
    "section": "ggplot2: info",
    "text": "ggplot2: info\n\n\nOverviewCheatsheetReading\n\n\n\nggplot2 uses the “Grammar of Graphics” and layers graphical components together to help us create a plot\nLet’s start by making a simple plot of our data!\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-visualization-2.1.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 3 Data visualization\nPackage documentation: https://ggplot2.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/03-ggplot2.html#ggplot2-exercise",
    "href": "tour-of-the-tidyverse-v2/03-ggplot2.html#ggplot2-exercise",
    "title": "Silvia Canelón",
    "section": "ggplot2: exercise",
    "text": "ggplot2: exercise\n\n\nView the dataScatterplotBoxplotBy SpeciesChat\n\n\nGet a full view of the dataset:\n\nView(penguins)\n\n Or catch a glimpse:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\nLet’s see if body mass varies by penguin sex using geom_point()\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) + \n  geom_point()\n\n\n\n\n\n\nLet’s see if body mass varies by penguin sex, this time with geom_boxplot()\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\n\n\n\n\n\n\nLet’s see if body mass varies by penguin sex, and now fill the boxplots according to penguin species\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species))\n\n\n\n\n\n\nThe boxplot filled by species helps us see…\n\nGentoo penguins have higher body mass than Adélie and Chinstrap penguins\nHigher body mass among male Gentoo penguins compared to female penguins\nPattern not as discernible when comparing Adélie and Chinstrap penguins\nNo NAs among Chinstrap penguin data points! sex was available for each observation"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/04-dplyr.html#section",
    "href": "tour-of-the-tidyverse-v2/04-dplyr.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/04-dplyr.html#dplyr-info",
    "href": "tour-of-the-tidyverse-v2/04-dplyr.html#dplyr-info",
    "title": "Silvia Canelón",
    "section": "dplyr: info",
    "text": "dplyr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\nData transformation helps you get the data in exactly the right form you need\nWith dplyr you can:\n\ncreate new variables\ncreate summaries\nrename variables\nreorder observations\n…and more!\n\n\n\nPick observations by their values with filter().\nReorder the rows with arrange().\nPick variables by their names select().\nCreate new variables with functions of existing variables with mutate().\nCollapse many values down to a single summary with summarize().\ngroup_by() gets the above functions to operate group-by-group rather than on the entire dataset.\nand count() + add_count() simplify group_by() + summarize() when you just want to count\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data transformation\nPackage documentation: https://dplyr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/04-dplyr.html#dplyr-exercise",
    "href": "tour-of-the-tidyverse-v2/04-dplyr.html#dplyr-exercise",
    "title": "Silvia Canelón",
    "section": "dplyr: exercise",
    "text": "dplyr: exercise\n\n\nSelectArrangeGroup By & SummarizeCount 1Count 2MutateFilter\n\n\nCan you spot the difference in these operations?\n\n\n\nselect(penguins, \n       species,\n       sex,\n       body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\n\n\npenguins |> \n  select(species,\n         sex,\n         body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\n\n\n\n\n\nWe can use arrange() to arrange our data in descending order by body_mass_g\n\n\n\nglimpse(penguins)\n## Rows: 344\n## Columns: 8\n## $ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n## $ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n## $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n## $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n## $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n## $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n## $ sex               <fct> male, female, female, NA, female, male, female, male…\n## $ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  arrange(desc(body_mass_g))\n\n# A tibble: 344 × 3\n   species sex   body_mass_g\n   <fct>   <fct>       <int>\n 1 Gentoo  male         6300\n 2 Gentoo  male         6050\n 3 Gentoo  male         6000\n 4 Gentoo  male         6000\n 5 Gentoo  male         5950\n 6 Gentoo  male         5950\n 7 Gentoo  male         5850\n 8 Gentoo  male         5850\n 9 Gentoo  male         5850\n10 Gentoo  male         5800\n# … with 334 more rows\n\n\n\n\n\n\n\n\n\nWe can use group_by() to group our data by species and sex\nWe can use summarize() to calculate the average body_mass_g for each grouping\n\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  group_by(species, sex) |>         \n  summarize(mean = mean(body_mass_g))\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>     NA \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>     NA \n\n\n\n\n\n\n\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\n\n\n\nCounting can be done with group_by() and summarize(), but it’s a little cumbersome.\nIt involves…\n\nusing mutate() to create an intermediate variable n_species that adds up all observations per species, and\nan ungroup()-ing step\n\n\n\npenguins |> \n  group_by(species) |>\n  mutate(n_species = n()) |> \n  ungroup() |> \n  group_by(species, sex, n_species) |>\n  summarize(n = n())\n\n# A tibble: 8 × 4\n# Groups:   species, sex [8]\n  species   sex    n_species     n\n  <fct>     <fct>      <int> <int>\n1 Adelie    female       152    73\n2 Adelie    male         152    73\n3 Adelie    <NA>         152     6\n4 Chinstrap female        68    34\n5 Chinstrap male          68    34\n6 Gentoo    female       124    58\n7 Gentoo    male         124    61\n8 Gentoo    <NA>         124     5\n\n\n\n\n\n\n\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\n\n\n\nIn contrast, count() and add_count() offer a simplified approach\n\nExample kindly contributed by Alison Hill\n\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\")\n\n# A tibble: 8 × 4\n  species   sex        n n_species\n  <fct>     <fct>  <int>     <int>\n1 Adelie    female    73       152\n2 Adelie    male      73       152\n3 Adelie    <NA>       6       152\n4 Chinstrap female    34        68\n5 Chinstrap male      34        68\n6 Gentoo    female    58       124\n7 Gentoo    male      61       124\n8 Gentoo    <NA>       5       124\n\n\n\n\n\n\n\n\n\nWe can add to our counting example by using mutate() to create a new variable prop\nprop represents the proportion of penguins of each sex, grouped by species\n\nExample kindly contributed by Alison Hill\n\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100)\n\n# A tibble: 8 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Adelie    female    73       152 48.0 \n2 Adelie    male      73       152 48.0 \n3 Adelie    <NA>       6       152  3.95\n4 Chinstrap female    34        68 50   \n5 Chinstrap male      34        68 50   \n6 Gentoo    female    58       124 46.8 \n7 Gentoo    male      61       124 49.2 \n8 Gentoo    <NA>       5       124  4.03\n\n\n\n\n\n\n\n\n\nFinally, we can filter rows to only show us Chinstrap penguin summaries by adding filter() to our pipeline\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100) |>\n  filter(species == \"Chinstrap\")\n\n# A tibble: 2 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Chinstrap female    34        68    50\n2 Chinstrap male      34        68    50"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/05-forcats.html#section",
    "href": "tour-of-the-tidyverse-v2/05-forcats.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/05-forcats.html#forcats-info",
    "href": "tour-of-the-tidyverse-v2/05-forcats.html#forcats-info",
    "title": "Silvia Canelón",
    "section": "forcats: info",
    "text": "forcats: info\n\n\nOverviewCheatsheetReading\n\n\n\nforcats helps us work with categorical variables or factors\nThese are variables that have a fixed and known set of possible values, like species, island, and sex in our penguins dataset\n\n\n https://github.com/rstudio/cheatsheets/raw/main/factors.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 15 Factors\nPackage documentation: https://forcats.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/05-forcats.html#forcats-exercise",
    "href": "tour-of-the-tidyverse-v2/05-forcats.html#forcats-exercise",
    "title": "Silvia Canelón",
    "section": "forcats: exercise",
    "text": "forcats: exercise\n\n\nCodeResult\n\n\nCurrently the year variable in penguins is continuous from 2007 to 2009\nUsually this isn’t what we want and we might want to turn it into a categorical variable instead\nThe factor() function is perfect for this\n\npenguins |> mutate(year_factor = factor(year, levels = unique(year)))\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n\n\n\n\nThe result is a new variable year_factor with factor levels 2007, 2008, and 2009\n\npenguins_new <- penguins |> mutate(year_factor = factor(year, levels = unique(year)))\npenguins_new |> head()\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_de…¹ flipp…² body_…³ sex    year year_…⁴\n  <fct>   <fct>              <dbl>     <dbl>   <int>   <int> <fct> <int> <fct>  \n1 Adelie  Torgersen           39.1      18.7     181    3750 male   2007 2007   \n2 Adelie  Torgersen           39.5      17.4     186    3800 fema…  2007 2007   \n3 Adelie  Torgersen           40.3      18       195    3250 fema…  2007 2007   \n4 Adelie  Torgersen           NA        NA        NA      NA <NA>   2007 2007   \n5 Adelie  Torgersen           36.7      19.3     193    3450 fema…  2007 2007   \n6 Adelie  Torgersen           39.3      20.6     190    3650 male   2007 2007   \n# … with abbreviated variable names ¹​bill_depth_mm, ²​flipper_length_mm,\n#   ³​body_mass_g, ⁴​year_factor\n\n\n\n\n\nclass(penguins_new$year_factor)\n\n[1] \"factor\"\n\n\n\n\nlevels(penguins_new$year_factor)\n\n[1] \"2007\" \"2008\" \"2009\""
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/06-stringr.html#section",
    "href": "tour-of-the-tidyverse-v2/06-stringr.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/06-stringr.html#stringr-info",
    "href": "tour-of-the-tidyverse-v2/06-stringr.html#stringr-info",
    "title": "Silvia Canelón",
    "section": "stringr: info",
    "text": "stringr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\nstringr helps us manipulate strings!\nThe package includes many functions to help us with regular expressions, which are a concise language for describing patterns in strings.\n\nThese functions help us\n\ndetect matches\nsubset strings\nmanage string lengths\nmutate strings\njoin and split strings\norder strings\n…and more!\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/strings.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 14 Strings\nPackage documentation: https://stringr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/06-stringr.html#stringr-exercise",
    "href": "tour-of-the-tidyverse-v2/06-stringr.html#stringr-exercise",
    "title": "Silvia Canelón",
    "section": "stringr: exercise",
    "text": "stringr: exercise\n\n\nMutateJoin\n\n\nWhat does this chunk do?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island))\n\n# A tibble: 344 × 3\n   species island    ISLAND   \n   <fct>   <fct>     <chr>    \n 1 Adelie  Torgersen TORGERSEN\n 2 Adelie  Torgersen TORGERSEN\n 3 Adelie  Torgersen TORGERSEN\n 4 Adelie  Torgersen TORGERSEN\n 5 Adelie  Torgersen TORGERSEN\n 6 Adelie  Torgersen TORGERSEN\n 7 Adelie  Torgersen TORGERSEN\n 8 Adelie  Torgersen TORGERSEN\n 9 Adelie  Torgersen TORGERSEN\n10 Adelie  Torgersen TORGERSEN\n# … with 334 more rows\n\n\n\n\nHow about this one?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island)) |>\n  mutate(species_island = str_c(species, ISLAND, sep = \"_\"))\n\n# A tibble: 344 × 4\n   species island    ISLAND    species_island  \n   <fct>   <fct>     <chr>     <chr>           \n 1 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 2 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 3 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 4 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 5 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 6 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 7 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 8 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 9 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n10 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n# … with 334 more rows"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/07-tidyr.html#section",
    "href": "tour-of-the-tidyverse-v2/07-tidyr.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/07-tidyr.html#tidyr-info",
    "href": "tour-of-the-tidyverse-v2/07-tidyr.html#tidyr-info",
    "title": "Silvia Canelón",
    "section": "tidyr: info",
    "text": "tidyr: info\n\n\nOverviewCheatsheetReading\n\n\ntidyr helps us transform our dataset into a tidy format\n\nThere are three interrelated rules which make a dataset tidy:\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell. \n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 12 Tidy data\nPackage documentation: https://tidyr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/07-tidyr.html#tidyr-exercise",
    "href": "tour-of-the-tidyverse-v2/07-tidyr.html#tidyr-exercise",
    "title": "Silvia Canelón",
    "section": "tidyr: exercise",
    "text": "tidyr: exercise\n\n\nUn-tidyingRe-tidying\n\n\nBoth penguin datasets are already tidy!\nWe can pretend that penguins wasn’t tidy and that it looked instead like untidy_penguins below, where body_mass_g was recorded separately for male, female, and NA sex penguins.\n\nuntidy_penguins <- penguins |> pivot_wider(names_from = sex, values_from = body_mass_g)\nuntidy_penguins\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_dept…¹ flipp…²  year  male female  `NA`\n   <fct>   <fct>              <dbl>       <dbl>   <int> <int> <int>  <int> <int>\n 1 Adelie  Torgersen           39.1        18.7     181  2007  3750     NA    NA\n 2 Adelie  Torgersen           39.5        17.4     186  2007    NA   3800    NA\n 3 Adelie  Torgersen           40.3        18       195  2007    NA   3250    NA\n 4 Adelie  Torgersen           NA          NA        NA  2007    NA     NA    NA\n 5 Adelie  Torgersen           36.7        19.3     193  2007    NA   3450    NA\n 6 Adelie  Torgersen           39.3        20.6     190  2007  3650     NA    NA\n 7 Adelie  Torgersen           38.9        17.8     181  2007    NA   3625    NA\n 8 Adelie  Torgersen           39.2        19.6     195  2007  4675     NA    NA\n 9 Adelie  Torgersen           34.1        18.1     193  2007    NA     NA  3475\n10 Adelie  Torgersen           42          20.2     190  2007    NA     NA  4250\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm\n\n\n\n\nNow let’s make it tidy again!\nWe’ll use the help of pivot_longer()\n\nuntidy_penguins |>\n  pivot_longer(cols = male:`NA`,           \n               names_to = \"sex\",           \n               values_to = \"body_mass_g\")\n\n# A tibble: 1,032 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹  year sex   body_…²\n   <fct>   <fct>              <dbl>         <dbl>      <int> <int> <chr>   <int>\n 1 Adelie  Torgersen           39.1          18.7        181  2007 male     3750\n 2 Adelie  Torgersen           39.1          18.7        181  2007 fema…      NA\n 3 Adelie  Torgersen           39.1          18.7        181  2007 NA         NA\n 4 Adelie  Torgersen           39.5          17.4        186  2007 male       NA\n 5 Adelie  Torgersen           39.5          17.4        186  2007 fema…    3800\n 6 Adelie  Torgersen           39.5          17.4        186  2007 NA         NA\n 7 Adelie  Torgersen           40.3          18          195  2007 male       NA\n 8 Adelie  Torgersen           40.3          18          195  2007 fema…    3250\n 9 Adelie  Torgersen           40.3          18          195  2007 NA         NA\n10 Adelie  Torgersen           NA            NA           NA  2007 male       NA\n# … with 1,022 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/08-purrr.html#section",
    "href": "tour-of-the-tidyverse-v2/08-purrr.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/08-purrr.html#purrr-info",
    "href": "tour-of-the-tidyverse-v2/08-purrr.html#purrr-info",
    "title": "Silvia Canelón",
    "section": "purrr: info",
    "text": "purrr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\nProvides tools for working with functions and vectors\nThe purrr family of functions helps us replace for loops, making our code easier to read and more succint.\n\nWith purrr you can\n\nIterate over a single input with map()\nIterate over two inputs in parallel with map2()\nIterate with multiple arguments with pmap()\nIterate with multiple arguments and functions with invoke_map()\nCall a function for its side-effects with walk(), walk2(), and pwalk()\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf \n\n\n\n\n\n{fig-alt=“R4DS book cover”}\n\n\nR for Data Science: Ch 21 Iteration\nPackage documentation: https://purrr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/08-purrr.html#purrr-exercise",
    "href": "tour-of-the-tidyverse-v2/08-purrr.html#purrr-exercise",
    "title": "Silvia Canelón",
    "section": "purrr: exercise",
    "text": "purrr: exercise\n\n\nTime for a change?GoalOption 1Options 2 & 3Purrr?More palettes!\n\n\n\n\nOk, we love our earlier boxplot showing us body_mass_g by sex and colored by species…\n…but let’s change up the colors to keep with our Antarctica theme!\nI’m a big fan of the color palettes in the nord 📦\n\n\n\n\n\n\n\n\n\n\n\nLet’s turn this plot…\n\n\n\n\n\n\n…into this one!\n\n\n\n\n\n\nNote: The color choices in this example are meant for demo purposes only. Be sure to consider the accessibility of your data viz, including color contrast between different elements.\n\n\n\n\n\n\n\n\nYou can choose colors usingthe color hex codes\n\nnord::nord_palettes$mountain_forms\n\n[1] \"#184860\" \"#486078\" \"#d8d8d8\" \"#484860\" \"#181830\"\n\n\nAnd assign them using the scale_fill_manual() function\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = c(\"#184860\", \n               \"#D8D8D8\", \n               \"#181830\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also use the palette name, like mountain_forms, though the colors assigned may not align with what you want \n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = nord::nord_palettes$mountain_forms\n    )\n\n\n\n\n\nAnd sometimes, color palette packages come with their own functions that assign colors, like scale_fill_nord()\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  nord::scale_fill_nord(\n    palette = \"mountain_forms\"\n    )\n\n\n\n\n\n\n\n\n\n\n\nThe prismatic 📦 helps us see the colors that correspond to each color hex code (mostly), with the color() function\n\nlibrary(prismatic)\n\nprismatic::color(\n    nord::nord_palettes$mountain_forms\n    )\n\n\n\npurrr’s map() function can help us iterate color() over all palettes in a palette package like nord!\n\nnord::nord_palettes |> \n    map(prismatic::color)\n\n\n\n\n\n\n\n\n\n\n🎨 r-color-palettes repo from Emil Hvitfeldt\nLike this Wes Anderson themed one! And many, many others 🤩"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/09-lubridate.html#section",
    "href": "tour-of-the-tidyverse-v2/09-lubridate.html#section",
    "title": "Silvia Canelón",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/09-lubridate.html#lubridate-info",
    "href": "tour-of-the-tidyverse-v2/09-lubridate.html#lubridate-info",
    "title": "Silvia Canelón",
    "section": "lubridate: info",
    "text": "lubridate: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\n\nlubridate helps us work with dates and times, including\n\na date like August 31, 2022\na time like 10:35 am\na date-time like 2022-08-31 10:35:00\n\n\nYou can…\n\nconvert strings or numbers to date-times\nget and set components of a date-time\nround date-times\nadd or subtract periods to model events that happen at specific clock times\nadd or substract durations to model a physical process\nwork with time intervals\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/lubridate.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 16 Dates and times\nPackage documentation: https://lubridate.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/09-lubridate.html#lubridate-exercise",
    "href": "tour-of-the-tidyverse-v2/09-lubridate.html#lubridate-exercise",
    "title": "Silvia Canelón",
    "section": "lubridate: exercise",
    "text": "lubridate: exercise\n\n\nRead data inView date-timesGet date components\n\n\nRecall that palmperpenguins includes raw data as well\n\npenguins_raw <- palmerpenguins::penguins_raw\npenguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`\n\n\n\n\nIn the raw data, Date Egg is the date that a penguin nest in the study was observed with 1 egg\nCheck out ?penguins_raw to learn more about the other variables in this dataset\n\npenguins_raw |> select(Species, Sex, `Date Egg`)\n\n# A tibble: 344 × 3\n   Species                             Sex    `Date Egg`\n   <chr>                               <chr>  <date>    \n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n# … with 334 more rows\n\n\n\n\nWe can use year(), month(), and day() to extract different components from Date Egg\nIn addition, month() provides some options to let us decide whether we want the month displayed as a character string, and whether we want that string abbreviated\n\npenguins_raw |> \n  select(Species, Sex, `Date Egg`) |> \n  mutate(Year = year(`Date Egg`),\n         Month = month(`Date Egg`, label = TRUE, abbr = FALSE),\n         Day = day(`Date Egg`))\n\n# A tibble: 344 × 6\n   Species                             Sex    `Date Egg`  Year Month      Day\n   <chr>                               <chr>  <date>     <dbl> <ord>    <int>\n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11  2007 November    11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11  2007 November    11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16  2007 November    16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16  2007 November    16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15  2007 November    15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15  2007 November    15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n# … with 334 more rows"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#silvia-canelón",
    "href": "tour-of-the-tidyverse-v2/index.html#silvia-canelón",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Silvia Canelón",
    "text": "Silvia Canelón\nData Analyst @ Penn Urban Health Lab\nUniversity of Pennsylvania, Philadelphia, PA, USA\n\nLink silviacanelon.com Twitter @spcanelon GitHub @spcanelon\n\nPhoto by Lucas Huffman on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#before-we-begin",
    "href": "tour-of-the-tidyverse-v2/index.html#before-we-begin",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Before we begin",
    "text": "Before we begin\n\nSlides adapted from xaringan slides created for an R-Ladies Chicago tutorial\nSlides made using the Quarto revealjs format\npalmerpenguins 📦 developed by Drs. Allison Horst, Alison Hill, and Kristen Gorman.\nPenguin illustrations by Allison Horst\nPhotographs from various photographers on Unsplash, and noted on the relevant slide\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#slide-navigation",
    "href": "tour-of-the-tidyverse-v2/index.html#slide-navigation",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Slide navigation",
    "text": "Slide navigation\nWelcome to the Antarctic Tour of the Tidyverse v2.0!\nThis is meant to be a fun and light introduction to each of the core tidyverse packages\n\nA table of contents for these slides can be accessed by clicking on the hamburger menu icon on the bottom left corner of the screen\nMany of these slides feature the use of interactive tabs to organize content. For each core package in the tidyverse, you will find two groups of tabs:\n\nThe first group is information about the package and includes an overview, cheatsheet, and reading suggestion\nThe second group includes exercises using the package and displays code chunks along with their respective outputs\n\nIf you prefer to read a longform tutorial with the same information, you can find one alongside these slides at tour-of-the-tidyverse-v2/tutorial"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#meet-our-penguin-friends",
    "href": "tour-of-the-tidyverse-v2/index.html#meet-our-penguin-friends",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Meet our penguin friends!",
    "text": "Meet our penguin friends!\n\n\n\nChinstrap\n\n\nGentoo\n\n\nAdélie\n\n\n\n\n🐧 Photos by Long Ma on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#collection-of-r-packages-including-these-9-core-packages-and-more",
    "href": "tour-of-the-tidyverse-v2/index.html#collection-of-r-packages-including-these-9-core-packages-and-more",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Collection of R packages, including  these 9 core packages (and more!)",
    "text": "Collection of R packages, including  these 9 core packages (and more!)\n\nlubridate was welcomed into the tidyverse as a core package on August 12, 2022You may need to install the development version with remotes::install_github(\"tidyverse/tidyverse\")"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section",
    "href": "tour-of-the-tidyverse-v2/index.html#section",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#readr-info",
    "href": "tour-of-the-tidyverse-v2/index.html#readr-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "readr: info",
    "text": "readr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\n\nImporting data is the very first step!\nYou can use readr to import rectangular data.\n\nYou can import…\n\ncomma separated (CSV) files with read_csv()\ntab separated files with read_tsv()\ngeneral delimited files with read_delim()\nfixed width files with read_fwf()\ntabular files where columns are separated by white-space with read_table()\nweb log files with read_log()\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data import\nPackage documentation: https://readr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#readr-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#readr-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "readr: exercise",
    "text": "readr: exercise\n\n\nRead data inClean dataRaw data\n\n\nOptions 1 & 2 below will get you the same raw dataset for Adélie penguins. Try it out!\nOption 1: load using URL\n\nread_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-pal.219.3&entityid=002f3893385f710df69eeebe893144ff\")\n\n Option 2: load using filepath\n\nread_csv(\"tutorial/raw_adelie.csv\")\n\n\n\nOption 3: Lucky for us, the palmerpenguins 📦 compiles data from all three species together! Check the clean data and raw data tabs to learn more.\n\n\npenguins contains a clean dataset\n\npenguins <- palmerpenguins::penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n\n\npenguins_raw contains the raw data\n\npalmerpenguins::penguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-1",
    "href": "tour-of-the-tidyverse-v2/index.html#section-1",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#tibble-info",
    "href": "tour-of-the-tidyverse-v2/index.html#tibble-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "tibble: info",
    "text": "tibble: info\n\n\nOverviewCheatsheetReading\n\n\n\nA tibble is much like the dataframe in base R,but optimized for use in the Tidyverse.\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 10 Tibbles\nPackage documentation: https://tibble.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#tibble-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#tibble-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "tibble: exercise",
    "text": "tibble: exercise\n\n\nCodeResultChatMore\n\n\nLet’s take a look at the differences!\n\n# try each of these commands in the console and see if \n# you can spot the differences!\n\nas_tibble(penguins)\nas.data.frame(penguins)\n\n\n\n\nas_tibble(penguins) |> head(4)\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n\n\n\nas.data.frame(penguins) |> head(4)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n\n\n\n\nWhat differences do you see?\nYou might see a tibble prints:\n\nvariable classes\nonly 10 rows\nonly as many columns as can fit on the screen\nNAs are highlighted in console so they’re easy to spot (font highlighting and styling in tibble)\n\nNot so much a concern in an R Markdown file, but noticeable in the console\nThis enhanced print method makes it easier to work with large datasets\n\n\nThere are a couple of other main differences, namely in subsetting and recycling\nCheck them out in vignette(\"tibble\")\n\nvignette(\"tibble\")"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-2",
    "href": "tour-of-the-tidyverse-v2/index.html#section-2",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#ggplot2-info",
    "href": "tour-of-the-tidyverse-v2/index.html#ggplot2-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "ggplot2: info",
    "text": "ggplot2: info\n\n\nOverviewCheatsheetReading\n\n\n\nggplot2 uses the “Grammar of Graphics” and layers graphical components together to help us create a plot\nLet’s start by making a simple plot of our data!\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-visualization-2.1.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 3 Data visualization\nPackage documentation: https://ggplot2.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#ggplot2-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#ggplot2-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "ggplot2: exercise",
    "text": "ggplot2: exercise\n\n\nView the dataScatterplotBoxplotBy SpeciesChat\n\n\nGet a full view of the dataset:\n\nView(penguins)\n\n Or catch a glimpse:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\nLet’s see if body mass varies by penguin sex using geom_point()\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) + \n  geom_point()\n\n\n\n\n\n\nLet’s see if body mass varies by penguin sex, this time with geom_boxplot()\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\n\n\n\n\n\n\nLet’s see if body mass varies by penguin sex, and now fill the boxplots according to penguin species\n\nggplot(data = penguins, aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species))\n\n\n\n\n\n\nThe boxplot filled by species helps us see…\n\nGentoo penguins have higher body mass than Adélie and Chinstrap penguins\nHigher body mass among male Gentoo penguins compared to female penguins\nPattern not as discernible when comparing Adélie and Chinstrap penguins\nNo NAs among Chinstrap penguin data points! sex was available for each observation"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-3",
    "href": "tour-of-the-tidyverse-v2/index.html#section-3",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#dplyr-info",
    "href": "tour-of-the-tidyverse-v2/index.html#dplyr-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "dplyr: info",
    "text": "dplyr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\nData transformation helps you get the data in exactly the right form you need\nWith dplyr you can:\n\ncreate new variables\ncreate summaries\nrename variables\nreorder observations\n…and more!\n\n\n\nPick observations by their values with filter().\nReorder the rows with arrange().\nPick variables by their names select().\nCreate new variables with functions of existing variables with mutate().\nCollapse many values down to a single summary with summarize().\ngroup_by() gets the above functions to operate group-by-group rather than on the entire dataset.\nand count() + add_count() simplify group_by() + summarize() when you just want to count\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data transformation\nPackage documentation: https://dplyr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#dplyr-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#dplyr-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "dplyr: exercise",
    "text": "dplyr: exercise\n\n\nSelectArrangeGroup By & SummarizeCount 1Count 2MutateFilter\n\n\nCan you spot the difference in these operations?\n\n\n\nselect(penguins, \n       species,\n       sex,\n       body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\n\n\npenguins |> \n  select(species,\n         sex,\n         body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\n\n\n\n\n\nWe can use arrange() to arrange our data in descending order by body_mass_g\n\n\n\nglimpse(penguins)\n## Rows: 344\n## Columns: 8\n## $ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n## $ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n## $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n## $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n## $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n## $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n## $ sex               <fct> male, female, female, NA, female, male, female, male…\n## $ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  arrange(desc(body_mass_g))\n\n# A tibble: 344 × 3\n   species sex   body_mass_g\n   <fct>   <fct>       <int>\n 1 Gentoo  male         6300\n 2 Gentoo  male         6050\n 3 Gentoo  male         6000\n 4 Gentoo  male         6000\n 5 Gentoo  male         5950\n 6 Gentoo  male         5950\n 7 Gentoo  male         5850\n 8 Gentoo  male         5850\n 9 Gentoo  male         5850\n10 Gentoo  male         5800\n# … with 334 more rows\n\n\n\n\n\n\n\n\n\nWe can use group_by() to group our data by species and sex\nWe can use summarize() to calculate the average body_mass_g for each grouping\n\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  group_by(species, sex) |>         \n  summarize(mean = mean(body_mass_g))\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>     NA \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>     NA \n\n\n\n\n\n\n\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\n\n\n\nCounting can be done with group_by() and summarize(), but it’s a little cumbersome.\nIt involves…\n\nusing mutate() to create an intermediate variable n_species that adds up all observations per species, and\nan ungroup()-ing step\n\n\n\npenguins |> \n  group_by(species) |>\n  mutate(n_species = n()) |> \n  ungroup() |> \n  group_by(species, sex, n_species) |>\n  summarize(n = n())\n\n# A tibble: 8 × 4\n# Groups:   species, sex [8]\n  species   sex    n_species     n\n  <fct>     <fct>      <int> <int>\n1 Adelie    female       152    73\n2 Adelie    male         152    73\n3 Adelie    <NA>         152     6\n4 Chinstrap female        68    34\n5 Chinstrap male          68    34\n6 Gentoo    female       124    58\n7 Gentoo    male         124    61\n8 Gentoo    <NA>         124     5\n\n\n\n\n\n\n\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\n\n\n\nIn contrast, count() and add_count() offer a simplified approach\n\nExample kindly contributed by Alison Hill\n\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\")\n\n# A tibble: 8 × 4\n  species   sex        n n_species\n  <fct>     <fct>  <int>     <int>\n1 Adelie    female    73       152\n2 Adelie    male      73       152\n3 Adelie    <NA>       6       152\n4 Chinstrap female    34        68\n5 Chinstrap male      34        68\n6 Gentoo    female    58       124\n7 Gentoo    male      61       124\n8 Gentoo    <NA>       5       124\n\n\n\n\n\n\n\n\n\nWe can add to our counting example by using mutate() to create a new variable prop\nprop represents the proportion of penguins of each sex, grouped by species\n\nExample kindly contributed by Alison Hill\n\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100)\n\n# A tibble: 8 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Adelie    female    73       152 48.0 \n2 Adelie    male      73       152 48.0 \n3 Adelie    <NA>       6       152  3.95\n4 Chinstrap female    34        68 50   \n5 Chinstrap male      34        68 50   \n6 Gentoo    female    58       124 46.8 \n7 Gentoo    male      61       124 49.2 \n8 Gentoo    <NA>       5       124  4.03\n\n\n\n\n\n\n\n\n\nFinally, we can filter rows to only show us Chinstrap penguin summaries by adding filter() to our pipeline\n\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100) |>\n  filter(species == \"Chinstrap\")\n\n# A tibble: 2 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Chinstrap female    34        68    50\n2 Chinstrap male      34        68    50"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-4",
    "href": "tour-of-the-tidyverse-v2/index.html#section-4",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#forcats-info",
    "href": "tour-of-the-tidyverse-v2/index.html#forcats-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "forcats: info",
    "text": "forcats: info\n\n\nOverviewCheatsheetReading\n\n\n\nforcats helps us work with categorical variables or factors\nThese are variables that have a fixed and known set of possible values, like species, island, and sex in our penguins dataset\n\n\n https://github.com/rstudio/cheatsheets/raw/main/factors.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 15 Factors\nPackage documentation: https://forcats.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#forcats-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#forcats-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "forcats: exercise",
    "text": "forcats: exercise\n\n\nCodeResult\n\n\nCurrently the year variable in penguins is continuous from 2007 to 2009\nUsually this isn’t what we want and we might want to turn it into a categorical variable instead\nThe factor() function is perfect for this\n\npenguins |> mutate(year_factor = factor(year, levels = unique(year)))\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n\n\n\n\nThe result is a new variable year_factor with factor levels 2007, 2008, and 2009\n\npenguins_new <- penguins |> mutate(year_factor = factor(year, levels = unique(year)))\npenguins_new |> head()\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_de…¹ flipp…² body_…³ sex    year year_…⁴\n  <fct>   <fct>              <dbl>     <dbl>   <int>   <int> <fct> <int> <fct>  \n1 Adelie  Torgersen           39.1      18.7     181    3750 male   2007 2007   \n2 Adelie  Torgersen           39.5      17.4     186    3800 fema…  2007 2007   \n3 Adelie  Torgersen           40.3      18       195    3250 fema…  2007 2007   \n4 Adelie  Torgersen           NA        NA        NA      NA <NA>   2007 2007   \n5 Adelie  Torgersen           36.7      19.3     193    3450 fema…  2007 2007   \n6 Adelie  Torgersen           39.3      20.6     190    3650 male   2007 2007   \n# … with abbreviated variable names ¹​bill_depth_mm, ²​flipper_length_mm,\n#   ³​body_mass_g, ⁴​year_factor\n\n\n\n\n\nclass(penguins_new$year_factor)\n\n[1] \"factor\"\n\n\n\n\nlevels(penguins_new$year_factor)\n\n[1] \"2007\" \"2008\" \"2009\""
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-5",
    "href": "tour-of-the-tidyverse-v2/index.html#section-5",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#stringr-info",
    "href": "tour-of-the-tidyverse-v2/index.html#stringr-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "stringr: info",
    "text": "stringr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\nstringr helps us manipulate strings!\nThe package includes many functions to help us with regular expressions, which are a concise language for describing patterns in strings.\n\nThese functions help us\n\ndetect matches\nsubset strings\nmanage string lengths\nmutate strings\njoin and split strings\norder strings\n…and more!\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/strings.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 14 Strings\nPackage documentation: https://stringr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#stringr-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#stringr-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "stringr: exercise",
    "text": "stringr: exercise\n\n\nMutateJoin\n\n\nWhat does this chunk do?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island))\n\n# A tibble: 344 × 3\n   species island    ISLAND   \n   <fct>   <fct>     <chr>    \n 1 Adelie  Torgersen TORGERSEN\n 2 Adelie  Torgersen TORGERSEN\n 3 Adelie  Torgersen TORGERSEN\n 4 Adelie  Torgersen TORGERSEN\n 5 Adelie  Torgersen TORGERSEN\n 6 Adelie  Torgersen TORGERSEN\n 7 Adelie  Torgersen TORGERSEN\n 8 Adelie  Torgersen TORGERSEN\n 9 Adelie  Torgersen TORGERSEN\n10 Adelie  Torgersen TORGERSEN\n# … with 334 more rows\n\n\n\n\nHow about this one?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island)) |>\n  mutate(species_island = str_c(species, ISLAND, sep = \"_\"))\n\n# A tibble: 344 × 4\n   species island    ISLAND    species_island  \n   <fct>   <fct>     <chr>     <chr>           \n 1 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 2 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 3 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 4 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 5 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 6 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 7 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 8 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 9 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n10 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n# … with 334 more rows"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-6",
    "href": "tour-of-the-tidyverse-v2/index.html#section-6",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#tidyr-info",
    "href": "tour-of-the-tidyverse-v2/index.html#tidyr-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "tidyr: info",
    "text": "tidyr: info\n\n\nOverviewCheatsheetReading\n\n\ntidyr helps us transform our dataset into a tidy format\n\nThere are three interrelated rules which make a dataset tidy:\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell. \n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 12 Tidy data\nPackage documentation: https://tidyr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#tidyr-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#tidyr-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "tidyr: exercise",
    "text": "tidyr: exercise\n\n\nUn-tidyingRe-tidying\n\n\nBoth penguin datasets are already tidy!\nWe can pretend that penguins wasn’t tidy and that it looked instead like untidy_penguins below, where body_mass_g was recorded separately for male, female, and NA sex penguins.\n\nuntidy_penguins <- penguins |> pivot_wider(names_from = sex, values_from = body_mass_g)\nuntidy_penguins\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_dept…¹ flipp…²  year  male female  `NA`\n   <fct>   <fct>              <dbl>       <dbl>   <int> <int> <int>  <int> <int>\n 1 Adelie  Torgersen           39.1        18.7     181  2007  3750     NA    NA\n 2 Adelie  Torgersen           39.5        17.4     186  2007    NA   3800    NA\n 3 Adelie  Torgersen           40.3        18       195  2007    NA   3250    NA\n 4 Adelie  Torgersen           NA          NA        NA  2007    NA     NA    NA\n 5 Adelie  Torgersen           36.7        19.3     193  2007    NA   3450    NA\n 6 Adelie  Torgersen           39.3        20.6     190  2007  3650     NA    NA\n 7 Adelie  Torgersen           38.9        17.8     181  2007    NA   3625    NA\n 8 Adelie  Torgersen           39.2        19.6     195  2007  4675     NA    NA\n 9 Adelie  Torgersen           34.1        18.1     193  2007    NA     NA  3475\n10 Adelie  Torgersen           42          20.2     190  2007    NA     NA  4250\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm\n\n\n\n\nNow let’s make it tidy again!\nWe’ll use the help of pivot_longer()\n\nuntidy_penguins |>\n  pivot_longer(cols = male:`NA`,           \n               names_to = \"sex\",           \n               values_to = \"body_mass_g\")\n\n# A tibble: 1,032 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹  year sex   body_…²\n   <fct>   <fct>              <dbl>         <dbl>      <int> <int> <chr>   <int>\n 1 Adelie  Torgersen           39.1          18.7        181  2007 male     3750\n 2 Adelie  Torgersen           39.1          18.7        181  2007 fema…      NA\n 3 Adelie  Torgersen           39.1          18.7        181  2007 NA         NA\n 4 Adelie  Torgersen           39.5          17.4        186  2007 male       NA\n 5 Adelie  Torgersen           39.5          17.4        186  2007 fema…    3800\n 6 Adelie  Torgersen           39.5          17.4        186  2007 NA         NA\n 7 Adelie  Torgersen           40.3          18          195  2007 male       NA\n 8 Adelie  Torgersen           40.3          18          195  2007 fema…    3250\n 9 Adelie  Torgersen           40.3          18          195  2007 NA         NA\n10 Adelie  Torgersen           NA            NA           NA  2007 male       NA\n# … with 1,022 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-7",
    "href": "tour-of-the-tidyverse-v2/index.html#section-7",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#purrr-info",
    "href": "tour-of-the-tidyverse-v2/index.html#purrr-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "purrr: info",
    "text": "purrr: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\nProvides tools for working with functions and vectors\nThe purrr family of functions helps us replace for loops, making our code easier to read and more succint.\n\nWith purrr you can\n\nIterate over a single input with map()\nIterate over two inputs in parallel with map2()\nIterate with multiple arguments with pmap()\nIterate with multiple arguments and functions with invoke_map()\nCall a function for its side-effects with walk(), walk2(), and pwalk()\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf \n\n\n\n\n\n{fig-alt=“R4DS book cover”}\n\n\nR for Data Science: Ch 21 Iteration\nPackage documentation: https://purrr.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#purrr-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#purrr-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "purrr: exercise",
    "text": "purrr: exercise\n\n\nTime for a change?GoalOption 1Options 2 & 3Purrr?More palettes!\n\n\n\n\nOk, we love our earlier boxplot showing us body_mass_g by sex and colored by species…\n…but let’s change up the colors to keep with our Antarctica theme!\nI’m a big fan of the color palettes in the nord 📦\n\n\n\n\n\n\n\n\n\n\n\nLet’s turn this plot…\n\n\n\n\n\n\n…into this one!\n\n\n\n\n\n\nNote: The color choices in this example are meant for demo purposes only. Be sure to consider the accessibility of your data viz, including color contrast between different elements.\n\n\n\n\n\n\n\n\nYou can choose colors usingthe color hex codes\n\nnord::nord_palettes$mountain_forms\n\n[1] \"#184860\" \"#486078\" \"#d8d8d8\" \"#484860\" \"#181830\"\n\n\nAnd assign them using the scale_fill_manual() function\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = c(\"#184860\", \n               \"#D8D8D8\", \n               \"#181830\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also use the palette name, like mountain_forms, though the colors assigned may not align with what you want \n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = nord::nord_palettes$mountain_forms\n    )\n\n\n\n\n\nAnd sometimes, color palette packages come with their own functions that assign colors, like scale_fill_nord()\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  nord::scale_fill_nord(\n    palette = \"mountain_forms\"\n    )\n\n\n\n\n\n\n\n\n\n\n\nThe prismatic 📦 helps us see the colors that correspond to each color hex code (mostly), with the color() function\n\nlibrary(prismatic)\n\nprismatic::color(\n    nord::nord_palettes$mountain_forms\n    )\n\n\n\npurrr’s map() function can help us iterate color() over all palettes in a palette package like nord!\n\nnord::nord_palettes |> \n    map(prismatic::color)\n\n\n\n\n\n\n\n\n\n\n🎨 r-color-palettes repo from Emil Hvitfeldt\nLike this Wes Anderson themed one! And many, many others 🤩"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#section-8",
    "href": "tour-of-the-tidyverse-v2/index.html#section-8",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "",
    "text": "Photo by James Eades on Unsplash"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#lubridate-info",
    "href": "tour-of-the-tidyverse-v2/index.html#lubridate-info",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "lubridate: info",
    "text": "lubridate: info\n\n\nOverviewCheatsheetReading\n\n\n\n\n\n\nlubridate helps us work with dates and times, including\n\na date like August 31, 2022\na time like 10:35 am\na date-time like 2022-08-31 10:35:00\n\n\nYou can…\n\nconvert strings or numbers to date-times\nget and set components of a date-time\nround date-times\nadd or subtract periods to model events that happen at specific clock times\nadd or substract durations to model a physical process\nwork with time intervals\n\n\n\n\n\n\n PDF: https://github.com/rstudio/cheatsheets/blob/main/lubridate.pdf \n\n\n\n\n\n\n\n\nR for Data Science: Ch 16 Dates and times\nPackage documentation: https://lubridate.tidyverse.org"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#lubridate-exercise",
    "href": "tour-of-the-tidyverse-v2/index.html#lubridate-exercise",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "lubridate: exercise",
    "text": "lubridate: exercise\n\n\nRead data inView date-timesGet date components\n\n\nRecall that palmperpenguins includes raw data as well\n\npenguins_raw <- palmerpenguins::penguins_raw\npenguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`\n\n\n\n\nIn the raw data, Date Egg is the date that a penguin nest in the study was observed with 1 egg\nCheck out ?penguins_raw to learn more about the other variables in this dataset\n\npenguins_raw |> select(Species, Sex, `Date Egg`)\n\n# A tibble: 344 × 3\n   Species                             Sex    `Date Egg`\n   <chr>                               <chr>  <date>    \n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n# … with 334 more rows\n\n\n\n\nWe can use year(), month(), and day() to extract different components from Date Egg\nIn addition, month() provides some options to let us decide whether we want the month displayed as a character string, and whether we want that string abbreviated\n\npenguins_raw |> \n  select(Species, Sex, `Date Egg`) |> \n  mutate(Year = year(`Date Egg`),\n         Month = month(`Date Egg`, label = TRUE, abbr = FALSE),\n         Day = day(`Date Egg`))\n\n# A tibble: 344 × 6\n   Species                             Sex    `Date Egg`  Year Month      Day\n   <chr>                               <chr>  <date>     <dbl> <ord>    <int>\n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11  2007 November    11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11  2007 November    11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16  2007 November    16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16  2007 November    16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15  2007 November    15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15  2007 November    15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n# … with 334 more rows"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/index.html#thanks-for-following-along",
    "href": "tour-of-the-tidyverse-v2/index.html#thanks-for-following-along",
    "title": "An Antarctic Tour of the Tidyverse",
    "section": "Thanks for following along!",
    "text": "Thanks for following along!\nLink silviacanelon.com\nTwitter @spcanelon\nGitHub @spcanelon\n\n\nslides.silviacanelon.com/tour-of-the-tidyverse-v2"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#before-we-begin",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#before-we-begin",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "Before we begin",
    "text": "Before we begin\n\nThis written tutorial is an alternative to the slide content in slides.silviacanelon.com/tour-of-the-tidyverse-v2\npalmerpenguins 📦 developed by Drs. Allison Horst, Alison Hill, and Kristen Gorman.\nPenguin illustrations by Allison Horst\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#meet-our-penguin-friends",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#meet-our-penguin-friends",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "Meet our penguin friends!",
    "text": "Meet our penguin friends!\n\n\n\n\n\nChinstrap\n\n\n\n\n\n\nGentoo\n\n\n\n\n\n\nAdélie"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#meet-the-tidyverse",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#meet-the-tidyverse",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "Meet the tidyverse!",
    "text": "Meet the tidyverse!\nA collection of R packages, including these 9 core packages (and more!)\n\nlubridate was welcomed into the tidyverse as a core package on August 12, 2022. You may need to install the development version:\n\nremotes::install_github(\"tidyverse/tidyverse\")"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#readr",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#readr",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "readr \n",
    "text": "readr \n\n\n\n\nOur penguin friends are starting their tour with the readr package!\n\n\n\n\n\n\nImporting data is the very first step!\nYou can use readr to import rectangular data.\nYou can import…\n\ncomma separated (CSV) files with read_csv()\n\ntab separated files with read_tsv()\n\ngeneral delimited files with read_delim()\n\nfixed width files with read_fwf()\n\ntabular files where columns are separated by white-space with read_table()\n\nweb log files with read_log()\n\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data import\n\nPackage documentation: https://readr.tidyverse.org\n\n\n\n\n\nExercise\nRead data in\nOptions 1 & 2 below will get you the same raw dataset for Adélie penguins. Try it out!\nOption 1: load using URL\n\nread_csv(\"https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-pal.219.3&entityid=002f3893385f710df69eeebe893144ff\")\n\nOption 2: load using filepath\n\nread_csv(\"tutorial/raw_adelie.csv\")\n\nOption 3: Lucky for us, the palmerpenguins 📦 compiles data from all three species together! Check the clean data and raw data tabs to learn more.\nClean data\npenguins contains a clean dataset\n\npenguins <- palmerpenguins::penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\nRaw data\npenguins_raw contains the raw data\n\npalmerpenguins::penguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#tibble",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#tibble",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "tibble \n",
    "text": "tibble \n\n\n\n\nOur penguin friends have reached the tibble package!\n\n\n\n\n\n\nA tibble is much like the dataframe in base R, but optimized for use in the Tidyverse.\nCheatsheet\nThe tibble package shares a cheatsheet with the tidyr package\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf\n\nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 10 Tibbles\n\nPackage documentation: https://tibble.tidyverse.org\n\n\n\n\n\nExercise\nCode\nLet’s take a look at the differences!\n\n# try each of these commands in the console and see if \n# you can spot the differences!\n\nas_tibble(penguins)\nas.data.frame(penguins)\n\nResult\n\nas_tibble(penguins)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n\nas.data.frame(penguins) |> head()\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   <NA> 2007\n5 female 2007\n6   male 2007\n\n\nWhat differences do you notice?\nYou might see a tibble prints:\n\nvariable classes\nonly 10 rows\nonly as many columns as can fit on the screen\n\nNAs are highlighted in console so they’re easy to spot (font highlighting and styling in tibble)\n\nNot so much a concern in an R Markdown file, but noticeable in the console\nThis enhanced print method makes it easier to work with large datasets\nThere are a couple of other main differences, namely in subsetting and recycling\nCheck them out in vignette(\"tibble\")\n\nvignette(\"tibble\")"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#ggplot2",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#ggplot2",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "ggplot2 \n",
    "text": "ggplot2 \n\n\n\n\nOur penguin friends have reached the ggplot2 package!\n\n\n\n\n\n\nggplot2 uses the “Grammar of Graphics” and layers graphical components together to help us create a plot\nLet’s start by making a simple plot of our data!\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-visualization-2.1.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 3 Data visualization\n\nPackage documentation: https://ggplot2.tidyverse.org\n\n\n\n\n\nExercise\nView the data\nGet a full view of the dataset:\n\nView(penguins)\n\nOr catch a glimpse:\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nScatterplot\nLet’s see if body mass varies by penguin sex using geom_point()\n\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) + \n  geom_point()\n\n\n\n\nBoxplot\nLet’s see if body mass varies by penguin sex, this time with geom_boxplot()\n\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) +\n  geom_boxplot()\n\n\n\n\nBy Species\nLet’s see if body mass varies by penguin sex, and now fill the boxplots according to penguin species\n\nggplot(\n  data = penguins, \n  aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species))\n\n\n\n\nThe boxplot filled by species helps us see…\n\nGentoo penguins have higher body mass than Adélie and Chinstrap penguins\nHigher body mass among male Gentoo penguins compared to female penguins\nPattern not as discernible when comparing Adélie and Chinstrap penguins\nNo NAs among Chinstrap penguin data points! sex was available for each observation"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#dplyr",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#dplyr",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "dplyr \n",
    "text": "dplyr \n\n\n\n\nOur penguin friends have reached the dplyr package!\n\n\n\n\n\n\nData transformation helps you get the data in exactly the right form you need\nWith dplyr you can:\n\ncreate new variables\ncreate summaries\nrename variables\nreorder observations\n…and more!\n\nThis is possible thanks to intuitive functions:\n\nPick observations by their values with filter().\nReorder the rows with arrange().\nPick variables by their names select().\nCreate new variables with functions of existing variables with mutate().\nCollapse many values down to a single summary with summarize().\n\ngroup_by() gets the above functions to operate group-by-group rather than on the entire dataset.\nand count() + add_count() simplify group_by() + summarize() when you just want to count\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 11 Data transformation\n\nPackage documentation: https://dplyr.tidyverse.org\n\n\n\n\n\nExercise\nSelect\nCan you spot the difference in the following two operations?\n\nselect(penguins, \n       species,\n       sex,\n       body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\n\npenguins |> \n  select(species,\n         sex,\n         body_mass_g)\n\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# … with 334 more rows\n\n\nThe first defines the penguins dataset with the select() function, while the second uses the pipe |> to pass the penguins dataset along to select()\nArrange\nWe can use arrange() to arrange our data in descending order by body_mass_g\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  arrange(desc(body_mass_g))\n\n# A tibble: 344 × 3\n   species sex   body_mass_g\n   <fct>   <fct>       <int>\n 1 Gentoo  male         6300\n 2 Gentoo  male         6050\n 3 Gentoo  male         6000\n 4 Gentoo  male         6000\n 5 Gentoo  male         5950\n 6 Gentoo  male         5950\n 7 Gentoo  male         5850\n 8 Gentoo  male         5850\n 9 Gentoo  male         5850\n10 Gentoo  male         5800\n# … with 334 more rows\n\n\nGroup By & Summarize\nWe can use group_by() to group our data by species and sex\nWe can use summarize() to calculate the average body_mass_g for each grouping\n\npenguins |>\n  select(species, sex, body_mass_g) |>\n  group_by(species, sex) |>         \n  summarize(mean = mean(body_mass_g))\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>     NA \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>     NA \n\n\nCount option 1\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\nCounting can be done with group_by() and summarize(), but it’s a little cumbersome.\nIt involves…\n\nusing mutate() to create an intermediate variable n_species that adds up all observations per species, and\nan ungroup()-ing step\n\n\npenguins |> \n  group_by(species) |>\n  mutate(n_species = n()) |> \n  ungroup() |> \n  group_by(species, sex, n_species) |>\n  summarize(n = n())\n\n# A tibble: 8 × 4\n# Groups:   species, sex [8]\n  species   sex    n_species     n\n  <fct>     <fct>      <int> <int>\n1 Adelie    female       152    73\n2 Adelie    male         152    73\n3 Adelie    <NA>         152     6\n4 Chinstrap female        68    34\n5 Chinstrap male          68    34\n6 Gentoo    female       124    58\n7 Gentoo    male         124    61\n8 Gentoo    <NA>         124     5\n\n\nCount option 2\nIf we’re just interested in counting the observations in each grouping, we can group and summarize with special functions count() and add_count().\nIn contrast, count() and add_count() offer a simplified approach 1\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\")\n\n# A tibble: 8 × 4\n  species   sex        n n_species\n  <fct>     <fct>  <int>     <int>\n1 Adelie    female    73       152\n2 Adelie    male      73       152\n3 Adelie    <NA>       6       152\n4 Chinstrap female    34        68\n5 Chinstrap male      34        68\n6 Gentoo    female    58       124\n7 Gentoo    male      61       124\n8 Gentoo    <NA>       5       124\n\n\nMutate\nWe can add to our counting example by using mutate() to create a new variable prop\nprop represents the proportion of penguins of each sex, grouped by species\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100)\n\n# A tibble: 8 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Adelie    female    73       152 48.0 \n2 Adelie    male      73       152 48.0 \n3 Adelie    <NA>       6       152  3.95\n4 Chinstrap female    34        68 50   \n5 Chinstrap male      34        68 50   \n6 Gentoo    female    58       124 46.8 \n7 Gentoo    male      61       124 49.2 \n8 Gentoo    <NA>       5       124  4.03\n\n\nFilter\nFinally, we can filter rows to only show us Chinstrap penguin summaries by adding filter() to our pipeline\n\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100) |>\n  filter(species == \"Chinstrap\")\n\n# A tibble: 2 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Chinstrap female    34        68    50\n2 Chinstrap male      34        68    50"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#forcats",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#forcats",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "forcats \n",
    "text": "forcats \n\n\n\n\nOur penguin friends have reached the forcats package!\n\n\n\n\n\n\nforcats helps us work with categorical variables or factors\nThese are variables that have a fixed and known set of possible values, like species, island, and sex in our penguins dataset\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/factors.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 15 Factors\n\nPackage documentation: https://forcats.tidyverse.org\n\n\n\n\n\nExercise\nCode\nCurrently the year variable in penguins is continuous from 2007 to 2009\nUsually this isn’t what we want and we might want to turn it into a categorical variable instead\nThe factor() function is perfect for this\n\npenguins |> \n  mutate(year_factor = factor(year, levels = unique(year)))\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n\n\nResult\nThe result is a new variable year_factor with factor levels 2007, 2008, and 2009\n\npenguins_new <- \n  penguins |> \n  mutate(year_factor = factor(year, levels = unique(year)))\npenguins_new\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year year_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <fct>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 2007   \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 2007   \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 2007   \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 2007   \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 2007   \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 2007   \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 2007   \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 2007   \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 2007   \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 2007   \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​year_factor\n\n\nWe can check our new variable’s class:\n\nclass(penguins_new$year_factor)\n\n[1] \"factor\"\n\n\nAnd check its factor levels:\n\nlevels(penguins_new$year_factor)\n\n[1] \"2007\" \"2008\" \"2009\""
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#stringr",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#stringr",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "stringr \n",
    "text": "stringr \n\n\n\n\nOur penguin friends have reached the stringr package!\n\n\n\n\n\n\nstringr helps us manipulate strings!\nThe package includes many functions to help us with regular expressions, which are a concise language for describing patterns in strings.\nThese functions help us:\n\ndetect matches\nsubset strings\nmanage string lengths\nmutate strings\njoin and split strings\norder strings\n…and more!\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/strings.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 14 Strings\n\nPackage documentation: https://stringr.tidyverse.org\n\n\n\n\n\nExercise\nMutate\nWhat does this chunk do?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island))\n\n# A tibble: 344 × 3\n   species island    ISLAND   \n   <fct>   <fct>     <chr>    \n 1 Adelie  Torgersen TORGERSEN\n 2 Adelie  Torgersen TORGERSEN\n 3 Adelie  Torgersen TORGERSEN\n 4 Adelie  Torgersen TORGERSEN\n 5 Adelie  Torgersen TORGERSEN\n 6 Adelie  Torgersen TORGERSEN\n 7 Adelie  Torgersen TORGERSEN\n 8 Adelie  Torgersen TORGERSEN\n 9 Adelie  Torgersen TORGERSEN\n10 Adelie  Torgersen TORGERSEN\n# … with 334 more rows\n\n\nIt creates a new variable ISLAND that transforms island observations to uppercase\nJoin\nHow about this one?\n\npenguins |>\n  select(species, island) |>\n  mutate(ISLAND = str_to_upper(island)) |>\n  mutate(species_island = str_c(species, ISLAND, sep = \"_\"))\n\n# A tibble: 344 × 4\n   species island    ISLAND    species_island  \n   <fct>   <fct>     <chr>     <chr>           \n 1 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 2 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 3 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 4 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 5 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 6 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 7 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 8 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n 9 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n10 Adelie  Torgersen TORGERSEN Adelie_TORGERSEN\n# … with 334 more rows\n\n\nIt creates a new vaiable species_island that concatenates species and ISLAND strings and places an underscore between them"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#tidyr",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#tidyr",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "tidyr \n",
    "text": "tidyr \n\n\n\n\nOur penguin friends have reached the tidyr package!\n\n\n\n\n\n\ntidyr helps us transform our dataset into a tidy format\n\nThere are three interrelated rules which make a dataset tidy:\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell. \n\n\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 12 Tidy data\n\nPackage documentation: https://tidyr.tidyverse.org\n\n\n\n\n\nExercise\nUn-tidying\nBoth penguin datasets are already tidy!\nWe can pretend that penguins wasn’t tidy and that it looked instead like untidy_penguins below, where body_mass_g was recorded separately for male, female, and NA sex penguins.\n\nuntidy_penguins <- \n  penguins |> \n  pivot_wider(names_from = sex, values_from = body_mass_g)\nuntidy_penguins\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_dept…¹ flipp…²  year  male female  `NA`\n   <fct>   <fct>              <dbl>       <dbl>   <int> <int> <int>  <int> <int>\n 1 Adelie  Torgersen           39.1        18.7     181  2007  3750     NA    NA\n 2 Adelie  Torgersen           39.5        17.4     186  2007    NA   3800    NA\n 3 Adelie  Torgersen           40.3        18       195  2007    NA   3250    NA\n 4 Adelie  Torgersen           NA          NA        NA  2007    NA     NA    NA\n 5 Adelie  Torgersen           36.7        19.3     193  2007    NA   3450    NA\n 6 Adelie  Torgersen           39.3        20.6     190  2007  3650     NA    NA\n 7 Adelie  Torgersen           38.9        17.8     181  2007    NA   3625    NA\n 8 Adelie  Torgersen           39.2        19.6     195  2007  4675     NA    NA\n 9 Adelie  Torgersen           34.1        18.1     193  2007    NA     NA  3475\n10 Adelie  Torgersen           42          20.2     190  2007    NA     NA  4250\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm\n\n\nRe-tidying\nNow let’s make it tidy again!\nWe’ll use the help of pivot_longer()\n\nuntidy_penguins |>\n  pivot_longer(cols = male:`NA`,           \n               names_to = \"sex\",           \n               values_to = \"body_mass_g\")\n\n# A tibble: 1,032 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹  year sex   body_…²\n   <fct>   <fct>              <dbl>         <dbl>      <int> <int> <chr>   <int>\n 1 Adelie  Torgersen           39.1          18.7        181  2007 male     3750\n 2 Adelie  Torgersen           39.1          18.7        181  2007 fema…      NA\n 3 Adelie  Torgersen           39.1          18.7        181  2007 NA         NA\n 4 Adelie  Torgersen           39.5          17.4        186  2007 male       NA\n 5 Adelie  Torgersen           39.5          17.4        186  2007 fema…    3800\n 6 Adelie  Torgersen           39.5          17.4        186  2007 NA         NA\n 7 Adelie  Torgersen           40.3          18          195  2007 male       NA\n 8 Adelie  Torgersen           40.3          18          195  2007 fema…    3250\n 9 Adelie  Torgersen           40.3          18          195  2007 NA         NA\n10 Adelie  Torgersen           NA            NA           NA  2007 male       NA\n# … with 1,022 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#purrr",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#purrr",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "purrr \n",
    "text": "purrr \n\n\n\n\nOur penguin friends have reached the purrr package!\n\n\n\n\n\n\nThis package provides tools for working with functions and vectors\nThe purrr family of functions helps us replace for loops, making our code easier to read and more succint.\nWith purrr you can:\n\nIterate over a single input with map()\n\nIterate over two inputs in parallel with map2()\n\nIterate with multiple arguments with pmap()\n\nIterate with multiple arguments and functions with invoke_map()\n\nCall a function for its side-effects with walk(), walk2(), and pwalk()\n\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 21 Iteration\n\nPackage documentation: https://purrr.tidyverse.org\n\n\n\n\n\nExercise\nTime for a change?\nOk, we love our earlier boxplot showing us body_mass_g by sex and colored by species…but let’s change up the colors to keep with our Antarctica theme!\nI’m a big fan of the color palettes in the nord 📦\n\nGoal\nLet’s turn this plot…\n\n\n\n\n\n…into this one!\n\n\n\n\n\nNote: The color choices in this example are meant for demo purposes only. Be sure to consider the accessibility of your data viz, including color contrast between different elements.\nOption 1\nYou can choose colors using the color hex codes\n\nnord::nord_palettes$mountain_forms\n\n[1] \"#184860\" \"#486078\" \"#d8d8d8\" \"#484860\" \"#181830\"\n\n\nAnd assign them using the scale_fill_manual() function\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = c(\"#184860\", \n               \"#D8D8D8\", \n               \"#181830\"))\n\n\n\n\n\n\nOptions 2 & 3\nYou can also use the palette name, like mountain_forms, though the colors assigned may not align with what you want\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(values = nord::nord_palettes$mountain_forms)\n\n\n\n\nAnd sometimes, color palette packages come with their own functions that assign colors, like scale_fill_nord()\n\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  nord::scale_fill_nord(palette = \"mountain_forms\")\n\n\n\n\nPurrr?\nThe prismatic 📦 helps us see the colors that correspond to each color hex code (mostly), with the color() function\n\nlibrary(prismatic)\n\nprismatic::color(nord::nord_palettes$mountain_forms)\n\n\npurrr’s map() function can help us iterate color() over all palettes in a palette package like nord!\n\nnord::nord_palettes |> \n    map(prismatic::color)\n\n\nMore palettes!\n\n\n\n🎨 r-color-palettes repo from Emil HvitfeldtLike this Wes Anderson themed one! And many, many others 🤩"
  },
  {
    "objectID": "tour-of-the-tidyverse-v2/tutorial/index.html#lubridate",
    "href": "tour-of-the-tidyverse-v2/tutorial/index.html#lubridate",
    "title": "An Antarctic Tour of the Tidyverse v2.0",
    "section": "lubridate \n",
    "text": "lubridate \n\n\n\n\nOur penguin friends are ending their tour with the lubridate package!\n\n\n\n\n\n\nlubridate helps us work with dates and times, including\n\na date like August 31, 2022\n\na time like 10:35 am\n\na date-time like 2022-08-31 10:35:00\n\n\nYou can…\n\nconvert strings or numbers to date-times\nget and set components of a date-time\nround date-times\nadd or subtract periods to model events that happen at specific clock times\nadd or substract durations to model a physical process\nwork with time intervals\n\nCheatsheet\n PDF: https://github.com/rstudio/cheatsheets/blob/main/lubridate.pdf \nReading\n\n\n\n\n\n\n\nR for Data Science: Ch 16 Dates and times\n\nPackage documentation: https://lubridate.tidyverse.org\n\n\n\n\n\nExercise\nRead data in\nRecall that palmperpenguins includes raw data as well\n\npenguins_raw <- palmerpenguins::penguins_raw\npenguins_raw\n\n# A tibble: 344 × 17\n   studyName Sample Num…¹ Species Region Island Stage Indiv…² Clutc…³ `Date Egg`\n   <chr>            <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <date>    \n 1 PAL0708              1 Adelie… Anvers Torge… Adul… N1A1    Yes     2007-11-11\n 2 PAL0708              2 Adelie… Anvers Torge… Adul… N1A2    Yes     2007-11-11\n 3 PAL0708              3 Adelie… Anvers Torge… Adul… N2A1    Yes     2007-11-16\n 4 PAL0708              4 Adelie… Anvers Torge… Adul… N2A2    Yes     2007-11-16\n 5 PAL0708              5 Adelie… Anvers Torge… Adul… N3A1    Yes     2007-11-16\n 6 PAL0708              6 Adelie… Anvers Torge… Adul… N3A2    Yes     2007-11-16\n 7 PAL0708              7 Adelie… Anvers Torge… Adul… N4A1    No      2007-11-15\n 8 PAL0708              8 Adelie… Anvers Torge… Adul… N4A2    No      2007-11-15\n 9 PAL0708              9 Adelie… Anvers Torge… Adul… N5A1    Yes     2007-11-09\n10 PAL0708             10 Adelie… Anvers Torge… Adul… N5A2    Yes     2007-11-09\n# … with 334 more rows, 8 more variables: `Culmen Length (mm)` <dbl>,\n#   `Culmen Depth (mm)` <dbl>, `Flipper Length (mm)` <dbl>,\n#   `Body Mass (g)` <dbl>, Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n#   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated variable names\n#   ¹​`Sample Number`, ²​`Individual ID`, ³​`Clutch Completion`\n\n\nView date-times\nIn the raw data, Date Egg is the date that a penguin nest in the study was observed with 1 egg\nCheck out ?penguins_raw to learn more about the other variables in this dataset\n\npenguins_raw |> select(Species, Sex, `Date Egg`)\n\n# A tibble: 344 × 3\n   Species                             Sex    `Date Egg`\n   <chr>                               <chr>  <date>    \n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09\n# … with 334 more rows\n\n\nGet date components\nWe can use year(), month(), and day() to extract different components from Date Egg\nIn addition, month() provides some options to let us decide whether we want the month displayed as a character string, and whether we want that string abbreviated\n\npenguins_raw |> \n  select(Species, Sex, `Date Egg`) |> \n  mutate(Year = year(`Date Egg`),\n         Month = month(`Date Egg`, \n                       label = TRUE,\n                       abbr = FALSE),\n         Day = day(`Date Egg`))\n\n# A tibble: 344 × 6\n   Species                             Sex    `Date Egg`  Year Month      Day\n   <chr>                               <chr>  <date>     <dbl> <ord>    <int>\n 1 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-11  2007 November    11\n 2 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-11  2007 November    11\n 3 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 4 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-16  2007 November    16\n 5 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-16  2007 November    16\n 6 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-16  2007 November    16\n 7 Adelie Penguin (Pygoscelis adeliae) FEMALE 2007-11-15  2007 November    15\n 8 Adelie Penguin (Pygoscelis adeliae) MALE   2007-11-15  2007 November    15\n 9 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n10 Adelie Penguin (Pygoscelis adeliae) <NA>   2007-11-09  2007 November     9\n# … with 334 more rows\n\n\nThat concludes the tutorial, thanks for following along!"
  }
]