{
  "hash": "08e478e72eefb53002e3430454bf9254",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    theme: [\"default\", \"css/rladies-spc.scss\"]\n    disable-layout: false #https://revealjs.com/config/\n    code-overflow: wrap\n    df-print: default\nexecute: \n  echo: true\n---\n\n\n# 07-tidyr {visibility=\"hidden\"}\n\n\n\n\n\n\n## {background-image=\"https://images.unsplash.com/photo-1591792111137-5b8219d5fad6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=4350&q=80\" background-position=\"52% 5%\" background-size=\"cover\"}\n\n![](images/drawio/07-tidyr.png){.absolute top=30 left=30 width=\"100%\" fig-alt=\"Our illustrated penguins have reached the tidyr package! The photo backdrop is a snowy Antarctic wonderland featuring a Gentoo penguin with outstretched flippers\"}\n\n::: footer\n<span>Photo by <a href=\"https://unsplash.com/@eadesstudio?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">James Eades</a> on <a href=\"https://unsplash.com/collections/12240655/palmerpenguins/d5aed8c855e26061e5e651d3f180b76d?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n:::\n\n---\n\n## tidyr: info {background-image=\"images/hex/tidyr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Overview {.center}\n\n`tidyr` helps us transform our dataset into a [tidy format](https://r4ds.had.co.nz/tidy-data.html)\n\n> There are three interrelated rules which make a dataset tidy:\n>\n> - Each variable must have its own column.\n> - Each observation must have its own row.\n> - Each value must have its own cell.\n> ![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png){fig-alt=\"schematic representing the 3 earlier points\"}\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf>\n![](images/cheatsheet/07-tidyr.png){fig-alt=\"tidyr cheatsheet\"}\n\n### Reading\n\n<!--start columns-->\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](images/r4ds-cover.png){width=\"300\" fig-alt=\"R4DS book cover\"}\n\n:::\n\n::: {.column width=\"60%\"}\n\n<br><br>\n\n#### R for Data Science: [Ch 12 Tidy data](https://r4ds.had.co.nz/tidy-data.html)\n\n#### Package documentation: <https://tidyr.tidyverse.org>\n\n:::\n\n::::\n<!--end columns-->\n\n::: \n<!--end panels-->\n\n## tidyr: exercise {background-image=\"images/hex/tidyr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Un-tidying\n\n#### Both penguin datasets are already tidy!\n\nWe can pretend that `penguins` wasn't tidy and that it looked instead like `untidy_penguins` below, where **body_mass_g** was recorded separately for *male*, *female*, and *NA* **sex** penguins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_penguins <- penguins |> pivot_wider(names_from = sex, values_from = body_mass_g)\nuntidy_penguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_dept…¹ flipp…²  year  male female  `NA`\n   <fct>   <fct>              <dbl>       <dbl>   <int> <int> <int>  <int> <int>\n 1 Adelie  Torgersen           39.1        18.7     181  2007  3750     NA    NA\n 2 Adelie  Torgersen           39.5        17.4     186  2007    NA   3800    NA\n 3 Adelie  Torgersen           40.3        18       195  2007    NA   3250    NA\n 4 Adelie  Torgersen           NA          NA        NA  2007    NA     NA    NA\n 5 Adelie  Torgersen           36.7        19.3     193  2007    NA   3450    NA\n 6 Adelie  Torgersen           39.3        20.6     190  2007  3650     NA    NA\n 7 Adelie  Torgersen           38.9        17.8     181  2007    NA   3625    NA\n 8 Adelie  Torgersen           39.2        19.6     195  2007  4675     NA    NA\n 9 Adelie  Torgersen           34.1        18.1     193  2007    NA     NA  3475\n10 Adelie  Torgersen           42          20.2     190  2007    NA     NA  4250\n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm\n```\n:::\n:::\n\n\n### Re-tidying\n\n#### Now let's make it tidy again!\n\nWe'll use the help of `pivot_longer()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3,4\"}\nuntidy_penguins |>\n  pivot_longer(cols = male:`NA`,           \n               names_to = \"sex\",           \n               values_to = \"body_mass_g\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,032 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹  year sex   body_…²\n   <fct>   <fct>              <dbl>         <dbl>      <int> <int> <chr>   <int>\n 1 Adelie  Torgersen           39.1          18.7        181  2007 male     3750\n 2 Adelie  Torgersen           39.1          18.7        181  2007 fema…      NA\n 3 Adelie  Torgersen           39.1          18.7        181  2007 NA         NA\n 4 Adelie  Torgersen           39.5          17.4        186  2007 male       NA\n 5 Adelie  Torgersen           39.5          17.4        186  2007 fema…    3800\n 6 Adelie  Torgersen           39.5          17.4        186  2007 NA         NA\n 7 Adelie  Torgersen           40.3          18          195  2007 male       NA\n 8 Adelie  Torgersen           40.3          18          195  2007 fema…    3250\n 9 Adelie  Torgersen           40.3          18          195  2007 NA         NA\n10 Adelie  Torgersen           NA            NA           NA  2007 male       NA\n# … with 1,022 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n```\n:::\n:::\n\n\n:::\n<!--end panels-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}