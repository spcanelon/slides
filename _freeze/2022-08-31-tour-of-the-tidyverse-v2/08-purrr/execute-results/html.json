{
  "hash": "a1d5af220589880af96dae350328302c",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    theme: [\"default\", \"css/rladies-spc.scss\"]\n    disable-layout: false #https://revealjs.com/config/\n    code-overflow: wrap\n    df-print: default\nexecute: \n  echo: true\n---\n\n\n# 08-purrr {visibility=\"hidden\"}\n\n\n\n\n\n\n## {background-image=\"https://images.unsplash.com/photo-1591792111137-5b8219d5fad6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=4350&q=80\" background-position=\"52% 5%\" background-size=\"cover\"}\n\n![](images/drawio/08-purrr.png){.absolute top=30 left=30 width=\"100%\" fig-alt=\"Our illustrated penguins have reached the purrr package! The photo backdrop is a snowy Antarctic wonderland featuring a Gentoo penguin with outstretched flippers\"}\n\n::: footer\n<span>Photo by <a href=\"https://unsplash.com/@eadesstudio?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">James Eades</a> on <a href=\"https://unsplash.com/collections/12240655/palmerpenguins/d5aed8c855e26061e5e651d3f180b76d?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n:::\n\n---\n\n## purrr: info {background-image=\"images/hex/purrr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Overview {.center}\n\n<br><br>\n\n:::: {.columns}\n\n::: {.column width=48%}\n\n#### Provides tools for working with functions and vectors \n\nThe `purrr` family of functions helps us replace for loops, making our code easier to read and more succint.\n\n:::\n\n::: {.column width=50%}\n\n#### With `purrr` you can\n\n- Iterate over a single input with `map()`\n- Iterate over two inputs in parallel with `map2()`\n- Iterate with multiple arguments with `pmap()`\n- Iterate with multiple arguments and functions with `invoke_map()`\n- Call a function for its side-effects with `walk()`, `walk2()`, and `pwalk()`\n\n:::\n\n::::\n<!--end columns-->\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf>\n![](images/cheatsheet/08-purrr.png){fig-alt=\"purrr cheatsheet\"}\n\n### Reading\n\n<!--start columns-->\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](images/r4ds-cover.png){width=\"300\"}{fig-alt=\"R4DS book cover\"}\n\n:::\n\n::: {.column width=\"60%\"}\n\n<br><br>\n\n#### R for Data Science: [Ch 21 Iteration](https://r4ds.had.co.nz/iteration.html)\n\n#### Package documentation: <https://purrr.tidyverse.org>\n\n:::\n\n::::\n<!--end columns-->\n\n::: \n<!--end panels-->\n\n## purrr: exercise {background-image=\"images/hex/purrr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Time for a change?\n\n:::: {.columns}\n\n::: {.column width=30%}\n\nOk, we love our earlier boxplot showing us **body_mass_g** by **sex** and colored by **species**... \n\n...but let's change up the colors to keep with our Antarctica theme!\n\nI'm a big fan of the color palettes in the `nord` ðŸ“¦\n\n:::\n\n::: {.column width=5%}\n\n:::\n\n::: {.column width=65%}\n\n![](https://raw.githubusercontent.com/jkaupp/nord/master/man/figures/README-palettes-1.png){fig-alt=\"16 different nordic color palettes from the Nord package. We will be focusing on the mountain_forms palette which was dark teal, dusty blue, snowy white, dusty purple, and dark purple\"}\n\n:::\n\n::::\n<!--end columns-->\n\n### Goal\n\n:::: {.columns}\n\n::: {.column}\n\nLet's turn this plot...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08-purrr_files/figure-revealjs/unnamed-chunk-2-1.png){fig-alt='Our filled boxplot from our earlier ggplot2 exercises! To recap, a boxplot with penguin sex along the x axis and body mass along the y axis. Again, the three sex categories are female, male, and NA, and the body mass appears to range between 2400g and 6500g. There is a boxplot for each species per sex category, and these are filled with different colors. Gentoo boxplots are blue, AdÃ©lie boxplots are reddish, and Chinstrap boxplots are green.' width=960}\n:::\n:::\n\n\n:::\n\n::: {.column}\n\n...into this one!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08-purrr_files/figure-revealjs/unnamed-chunk-3-1.png){fig-alt='In contrast to the other filled boxplot referred to in this tab, this one is filled with nordic colors. Gentoo boxplots are a dark purple, AdÃ©lie boxplots are a dark teal, and Chinstrap boxplots are a snowy white.' width=960}\n:::\n:::\n\n\n::: {.small-text}\nNote: The color choices in this example are meant for demo purposes only. Be sure to consider the [accessibility of your data viz](https://www.highcharts.com/blog/tutorials/10-guidelines-for-dataviz-accessibility), including color contrast between different elements.\n:::\n\n:::\n\n::::\n<!--end columns-->\n\n### Option 1\n\n:::: {.columns}\n\n::: {.column}\n\nYou can choose colors using<br>the color hex codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnord::nord_palettes$mountain_forms\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#184860\" \"#486078\" \"#d8d8d8\" \"#484860\" \"#181830\"\n```\n:::\n:::\n\n\nAnd assign them using the `scale_fill_manual()` function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = c(\"#184860\", \n               \"#D8D8D8\", \n               \"#181830\"))\n```\n:::\n\n\n:::\n\n::: {.column}\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08-purrr_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::: \n<!--end columns-->\n\n### Options 2 & 3\n\n:::: {.columns}\n\n::: {.column}\n\nYou can also use the palette name, like **mountain_forms**, though the colors assigned may not align with what you want\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-6\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  scale_fill_manual(\n    values = nord::nord_palettes$mountain_forms\n    )\n```\n\n::: {.cell-output-display}\n![](08-purrr_files/figure-revealjs/nord-2-1.png){fig-alt='Our boxplot filled with nordic colors though the scale_fill_manual function has automatically selected a different combination of colors from the palette. Gentoo boxplots are snowy white intead of dark purple, AdÃ©lie boxplots are a still a dark teal, and Chinstrap boxplots are a dusty blue intead of snowy white.' width=480}\n:::\n:::\n\n\n:::\n\n::: {.column}\n\nAnd sometimes, color palette packages come with their own functions that assign colors, like `scale_fill_nord()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-6\"}\npenguins |>\n  ggplot(aes(x = sex, y = body_mass_g)) +\n  geom_boxplot(aes(fill = species)) +\n  nord::scale_fill_nord(\n    palette = \"mountain_forms\"\n    )\n```\n\n::: {.cell-output-display}\n![](08-purrr_files/figure-revealjs/unnamed-chunk-6-1.png){fig-alt='Our boxplot filled with nordic colors. Gentoo boxplots are a dark purple, AdÃ©lie boxplots are a dark teal, and Chinstrap boxplots are a snowy white.' width=480}\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Purrr?\n\n:::: {.columns}\n\n::: {.column}\n\nThe `prismatic` ðŸ“¦ helps us **see** the colors that correspond to each color hex code (mostly), with the `color()` function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prismatic)\n\nprismatic::color(\n    nord::nord_palettes$mountain_forms\n    )\n```\n:::\n\n![](images/nord_mountainforms.png){fig-alt=\"hex codes for the 5 colors in the mountain_forms palette, with a background color to match it. Dark teal is #184860, dusty blue is #486078, snowy white is #D8D8D8, purple is #484860, and dark purple is #181830\"}\n\n:::\n\n::: {.column}\n\n`purrr`'s `map()` function can help us iterate `color()` over all palettes in a palette package like `nord`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnord::nord_palettes |> \n    map(prismatic::color)\n```\n:::\n\n\n![](images/nord_multiple.png){fig-alt=\"hex color codes for 4 of the palettes in the nord package, including mountain_forms\"}\n\n:::\n\n::::\n<!--end columns-->\n\n### More palettes!\n\n:::: {.columns}\n\n::: {.column}\n\n<br><br>\n\nðŸŽ¨ [r-color-palettes repo](https://github.com/EmilHvitfeldt/r-color-palettes) from Emil Hvitfeldt\n\nLike this Wes Anderson themed one! And many, many others ðŸ¤©\n\n:::\n\n::: {.column}\n\n![](images/wesanderson_example.png){fig-alt=\"10 different bright color palettes from the wesanderson color palette package.\"}\n\n:::\n\n::::\n<!--end columns-->\n\n:::\n<!--end panels-->\n",
    "supporting": [
      "08-purrr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}