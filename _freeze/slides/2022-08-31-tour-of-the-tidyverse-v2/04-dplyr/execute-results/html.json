{
  "hash": "6aa5046fa7c9233a2e7cdb9c864ae3eb",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    theme: [\"default\", \"css/rladies-spc.scss\"]\n    disable-layout: false #https://revealjs.com/config/\n    code-overflow: wrap\n    width: 1050\n    height: 700\nexecute: \n  echo: true\n---\n\n\n# 04-dplyr {visibility=\"hidden\"}\n\n\n\n\n\n\n## {background-image=\"https://images.unsplash.com/photo-1591792111137-5b8219d5fad6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=4350&q=80\" background-position=\"52% 5%\" background-size=\"cover\"}\n\n![](images/drawio/04-dplyr.png){.absolute top=30 left=30 width=\"100%\" fig-alt=\"Our illustrated penguins have reached the dplyr package! The photo backdrop is a snowy Antarctic wonderland featuring a Gentoo penguin with outstretched flippers\"}\n\n::: footer\n<span>Photo by <a href=\"https://unsplash.com/@eadesstudio?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">James Eades</a> on <a href=\"https://unsplash.com/collections/12240655/palmerpenguins/d5aed8c855e26061e5e651d3f180b76d?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n:::\n\n---\n\n## dplyr: info {background-image=\"images/hex/dplyr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Overview {.center}\n\n:::: {.columns}\n\n::: {.column}\n\n#### Data transformation helps you get the data in exactly the right form you need \n\nWith `dplyr` you can:\n\n- create new variables\n- create summaries\n- rename variables\n- reorder observations\n- ...and more!\n\n:::\n\n::: {.column}\n\n- Pick observations by their values with `filter()`.\n- Reorder the rows with `arrange()`.\n- Pick variables by their names `select()`.\n- Create new variables with functions of existing variables with `mutate()`.\n- Collapse many values down to a single summary with `summarize()`.\n- `group_by()` gets the above functions to operate group-by-group rather than on the entire dataset. \n- and `count()` + `add_count()` simplify `group_by()` + `summarize()` when you just want to count\n\n:::\n\n::::\n<!--end columns-->\n\n### Cheatsheet\n\n{{< fa file-pdf >}} PDF: <https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf>\n![](images/cheatsheet/04-dplyr.png){width=100% fig-alt=\"dplyr cheatsheet\"}\n\n### Reading\n\n<!--start columns-->\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n![](images/r4ds-cover.png){width=\"300\" fig-alt=\"R4DS book cover\"}\n\n:::\n\n::: {.column width=\"60%\"}\n\n<br>\n\n### R for Data Science: [Ch 11 Data transformation](https://r4ds.had.co.nz/transform.html)\n\n### Package documentation: <https://dplyr.tidyverse.org>\n:::\n\n::::\n<!--end columns-->\n\n::: \n<!--end panels-->\n\n## dplyr: exercise {background-image=\"images/hex/dplyr.png\" background-size=\"8%\" background-position=\"98% 4%\"}\n\n<!--start panels-->\n::: {.panel-tabset}\n\n### Select\n\n#### Can you spot the difference in these operations?{.center-x}\n\n:::: {.columns}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins, \n       species,\n       sex,\n       body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n:::\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(species,\n         sex,\n         body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex    body_mass_g\n   <fct>   <fct>        <int>\n 1 Adelie  male          3750\n 2 Adelie  female        3800\n 3 Adelie  female        3250\n 4 Adelie  <NA>            NA\n 5 Adelie  female        3450\n 6 Adelie  male          3650\n 7 Adelie  female        3625\n 8 Adelie  male          4675\n 9 Adelie  <NA>          3475\n10 Adelie  <NA>          4250\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Arrange\n\nWe can use `arrange()` to arrange our data in descending order by **body_mass_g**\n\n:::: {.columns}\n\n::: {.column width=45%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n## Rows: 344\n## Columns: 8\n## $ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n## $ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n## $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n## $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n## $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n## $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n## $ sex               <fct> male, female, female, NA, female, male, female, male…\n## $ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n\n\n:::\n\n::: {.column width=55%}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npenguins |>\n  select(species, sex, body_mass_g) |>\n  arrange(desc(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex   body_mass_g\n   <fct>   <fct>       <int>\n 1 Gentoo  male         6300\n 2 Gentoo  male         6050\n 3 Gentoo  male         6000\n 4 Gentoo  male         6000\n 5 Gentoo  male         5950\n 6 Gentoo  male         5950\n 7 Gentoo  male         5850\n 8 Gentoo  male         5850\n 9 Gentoo  male         5850\n10 Gentoo  male         5800\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Group By & Summarize\n\n:::: {.columns}\n\n::: {.column width=45%}\n\nWe can use `group_by()` to group our data by **species** and **sex**\n\nWe can use `summarize()` to calculate the average **body_mass_g** for each grouping\n\n:::\n\n::: {.column width=55%}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3|4\"}\npenguins |>\n  select(species, sex, body_mass_g) |>\n  group_by(species, sex) |>         \n  summarize(mean = mean(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    <NA>     NA \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    <NA>     NA \n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Count 1\n\nIf we're just interested in _counting_ the observations in each grouping, we can group and summarize with special functions `count()` and `add_count()`.\n\n----\n\n:::: {.columns}\n\n::: {.column width=45%}\n\nCounting can be done with `group_by()` and `summarize()`, but it's a little cumbersome. \n\nIt involves...\n\n1. using `mutate()` to create an intermediate variable **n_species** that adds up all observations per **species**, and\n1. an `ungroup()`-ing step\n\n:::\n\n::: {.column width=55%}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\npenguins |> \n  group_by(species) |>\n  mutate(n_species = n()) |> \n  ungroup() |> \n  group_by(species, sex, n_species) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n# Groups:   species, sex [8]\n  species   sex    n_species     n\n  <fct>     <fct>      <int> <int>\n1 Adelie    female       152    73\n2 Adelie    male         152    73\n3 Adelie    <NA>         152     6\n4 Chinstrap female        68    34\n5 Chinstrap male          68    34\n6 Gentoo    female       124    58\n7 Gentoo    male         124    61\n8 Gentoo    <NA>         124     5\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Count 2\n\nIf we're just interested in _counting_ the observations in each grouping, we can group and summarize with special functions `count()` and `add_count()`.\n\n----\n\n:::: {.columns}\n\n::: {.column width=45%}\n\nIn contrast, `count()` and `add_count()` offer a simplified approach\n\n::: {.small-text}\nExample kindly [contributed by Alison Hill](https://github.com/spcanelon/2020-rladies-chi-tidyverse/issues/2)\n:::\n\n:::\n\n::: {.column width=55%}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n  species   sex        n n_species\n  <fct>     <fct>  <int>     <int>\n1 Adelie    female    73       152\n2 Adelie    male      73       152\n3 Adelie    <NA>       6       152\n4 Chinstrap female    34        68\n5 Chinstrap male      34        68\n6 Gentoo    female    58       124\n7 Gentoo    male      61       124\n8 Gentoo    <NA>       5       124\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Mutate\n\n:::: {.columns}\n\n::: {.column width=45%}\nWe can add to our counting example by using `mutate()` to create a new variable **prop**\n\n**prop** represents the proportion of penguins of each **sex**, grouped by **species**\n\n::: {.small-text}\n\nExample kindly [contributed by Alison Hill](https://github.com/spcanelon/2020-rladies-chi-tidyverse/issues/2)\n\n:::\n\n:::\n\n::: {.column width=55%}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Adelie    female    73       152 48.0 \n2 Adelie    male      73       152 48.0 \n3 Adelie    <NA>       6       152  3.95\n4 Chinstrap female    34        68 50   \n5 Chinstrap male      34        68 50   \n6 Gentoo    female    58       124 46.8 \n7 Gentoo    male      61       124 49.2 \n8 Gentoo    <NA>       5       124  4.03\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n### Filter\n\n:::: {.columns}\n\n::: {.column width=45%}\n\nFinally, we can filter rows to only show us **Chinstrap** penguin summaries by adding `filter()` to our pipeline\n\n:::\n\n::: {.column width=55%}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\npenguins |>\n  count(species, sex) |>\n  add_count(species, wt = n, \n            name = \"n_species\") |>\n  mutate(prop = n/n_species*100) |>\n  filter(species == \"Chinstrap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  species   sex        n n_species  prop\n  <fct>     <fct>  <int>     <int> <dbl>\n1 Chinstrap female    34        68    50\n2 Chinstrap male      34        68    50\n```\n:::\n:::\n\n\n:::\n\n::::\n<!--end columns-->\n\n:::\n<!--end panels-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}